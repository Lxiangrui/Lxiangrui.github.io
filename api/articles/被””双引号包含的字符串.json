{"title":"被””双引号包含的字符串","uid":"4fd5af4139838304dc8887e270cbaf0f","slug":"被””双引号包含的字符串","date":"2021-12-22T12:00:57.000Z","updated":"2022-04-09T09:36:45.701Z","comments":true,"path":"api/articles/被””双引号包含的字符串.json","keywords":null,"cover":[],"content":"<h1 id=\"char-p-“hello-world-”-（仅作本人记录）\"><a href=\"#char-p-“hello-world-”-（仅作本人记录）\" class=\"headerlink\" title=\"char *p = “hello world!”;（仅作本人记录）\"></a>char *p = “hello world!”;（仅作本人记录）</h1><h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>C语言中的双引号用来表示<strong>字符串字面量</strong>，编译为对应的内存地址。</p>\n<p>char <em>p = “hello world!”; 在这个声明中，</em>*”hello world!”被存储在静态数据区，而且是全局的**，p仅仅就是个指针，指向这个区域。C函数执行完之后对栈区进行清除操作，对静态数据区和堆则没有，所以有着和malloc一样的作用。可以在子函数里面定义变量，返回主函数后仍然可以继续使用。</p>\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>这只是我自己玩玩，因为比较低级，所以可能会让大家觉得浪费社区环境资源，但我这更多是为了自己记录哈。</p>\n<p>原因是我在观看韦东山老师的嵌入式课程时，发现老师输入的这段代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token operator\">=</span> “string”；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>什么？居然有这种操作。作为小菜鸡的我得看看什么情况。我得了解一下，😋😋😋😋。</p>\n<h2 id=\"正文（废话）：\"><a href=\"#正文（废话）：\" class=\"headerlink\" title=\"正文（废话）：\"></a>正文（废话）：</h2><p>OK!!    CSDN启动，搜索关键词**”c双引号”**，点开一个浏览量比较高的<a href=\"https://blog.csdn.net/xiebs/article/details/93466116?ops_request_misc=%7B%22request_id%22:%22164016311616780265422981%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164016311616780265422981&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-93466116.first_rank_v2_pc_rank_v29&utm_term=C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7&spm=1018.2226.3001.4187\">BLOG</a>，该博主介绍到：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C语言中的双引号用来表示<strong>字符串字面量</strong>，编译为对应的内存地址</th>\n</tr>\n</thead>\n</table>\n<p>ok，我又不知道了，字符串字面量是啥？</p>\n<p>CSDN启动（梅开二度）</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">在计算机科学中，字面量（literal）是用于表达源代码中一个固定值的表示法（notation）。 几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；</th>\n</tr>\n</thead>\n</table>\n<p>好，原来字面量是这个意思，和汇编的立即数很像嘛。</p>\n<p>到这里我应该是懂了，原来字符串字面量加上”“（双引号）之后，程序会把这个字面量的内存地址带出来。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token string\">\"hello 2022!\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://s4.ax1x.com/2021/12/22/T1UAfK.png\" alt=\"T1UAfK.png\"></p>\n<p>完美！</p>\n<p>但我又再想哦，那个如果在一个子函数里面使用了这种用法，是否能将字符串变量返回给函数名呢？</p>\n<p>一般情况下，当我们在子函数里面，定义变量，那么这个变量的生命周期会随着这次函数的结束，而被释放掉，如果函数返回了这个变量的地址，回到主函数后使用它的时候，程序会报错。</p>\n<p>比如下面的例子：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello 2022!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://s4.ax1x.com/2021/12/22/T1RoXn.png\" alt=\"T1RoXn.png\"></p>\n<p>因为char数组创建在栈区，函数运行完后会被释放，你就访问不到了。</p>\n<p>意思是:分段故障，段错误就是指访问的内存超过了系统所给这个程序的内存空间。就是因为我们子函数已经结束，它里面定义的变量已经结束了它的生命周期，其分配的地址（内存），也就被释放了，所以程序找不到这个地址，报错了。</p>\n<p>如何避免这个问题呢？通常来说，我们会动态分配内存，保证子函数结束后，变量的地址（内存）不会被释放。</p>\n<p>比如下面的例子：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello 2022!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>显示</p>\n<p><img src=\"https://s4.ax1x.com/2021/12/22/T1UAfK.png\" alt=\"T1UAfK.png\"></p>\n<p>回到我们的主题来：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C语言中的双引号用来表示<strong>字符串字面量</strong>，编译为对应的内存地址</th>\n</tr>\n</thead>\n</table>\n<p>所以如果双引号包含字符字面量赋值给子函数的自变量，会成功嘛？</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>  p <span class=\"token operator\">=</span> <span class=\"token string\">\"hello 2022!\\n\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://s4.ax1x.com/2021/12/22/T1UAfK.png\" alt=\"T1UAfK.png\"></p>\n<p>好耶！！果然能继续使用，没有随着子函数的结束而释放掉这个字符型变量的地址（内存），说明使用双引号包含字符型字面量时，是程序动态分配了这个字符字面量的内存，并把内容放入其中了。有着和malloc一样的作用。</p>\n","text":"char *p = “hello world!”;（仅作本人记录）结论：C语言中的双引号用来表示字符串字面量，编译为对应的内存地址。 char p = “hello world!”; 在这个声明中，*”hello world!”被存储在静态数据区，而且是全局的**，p仅仅就是个指...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"taking","slug":"taking","count":3,"path":"api/categories/taking.json"}],"tags":[{"name":"c","slug":"c","count":2,"path":"api/tags/c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#char-p-%E2%80%9Chello-world-%E2%80%9D-%EF%BC%88%E4%BB%85%E4%BD%9C%E6%9C%AC%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89\"><span class=\"toc-text\">char *p &#x3D; “hello world!”;（仅作本人记录）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA%EF%BC%9A\"><span class=\"toc-text\">结论：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80%EF%BC%9A\"><span class=\"toc-text\">前言：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E6%96%87%EF%BC%88%E5%BA%9F%E8%AF%9D%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">正文（废话）：</span></a></li></ol></li></ol>","author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"导出学习通题目详细步骤","uid":"ccbdde2afef607425cf6ff28788fd53a","slug":"导出学习通题目详细步骤","date":"2021-12-23T07:50:02.000Z","updated":"2022-04-09T09:36:50.593Z","comments":true,"path":"api/articles/导出学习通题目详细步骤.json","keywords":null,"cover":"https://s1.ax1x.com/2022/04/09/LilfCF.png","text":"1、用电脑浏览器打开题目网站 2、按下键盘的 F12按下后网页右边出现窗口 3、点击源代码 4、找到的这个文件 5、右键这个文件选择”另存为” 6、将保存下来的文件改名（改成word格式也就是后缀doc） 改成这样就可以了 7、然后用word打开就是了，导pdf啥的，你应该会哦，...","link":"","photos":[],"count_time":{"symbolsCount":159,"symbolsTime":"1 mins."},"categories":[{"name":"记录","slug":"记录","count":3,"path":"api/categories/记录.json"}],"tags":[{"name":"taking","slug":"taking","count":1,"path":"api/tags/taking.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"通信原理","uid":"a62551fd56e2837b6f4afeba433d6170","slug":"通信原理","date":"2021-12-20T12:19:42.000Z","updated":"2021-12-20T13:20:08.805Z","comments":true,"path":"api/articles/通信原理.json","keywords":null,"cover":[],"text":"&lt;&lt;现代通信原理&gt;&gt;，是我在大三上学期学习的课程，因为想混git的小绿点，以及记录一下，所以把复习（学习）笔记，上传到blog上面来了。 🙂🙂🙂🙂🙂🙂 现代通信原理 根据学习通上老师设置的章节，可分为 绪论、通信系统中的信号信道和噪声、模拟调制系统、差错控...","link":"","photos":[],"count_time":{"symbolsCount":618,"symbolsTime":"1 mins."},"categories":[{"name":"课程学习","slug":"课程学习","count":6,"path":"api/categories/课程学习.json"}],"tags":[{"name":"信号","slug":"信号","count":1,"path":"api/tags/信号.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}