{"title":"C_answer","uid":"5ff3ed1096e2d71cb98e6d4ddf0126cd","slug":"C-answer","date":"2021-12-17T04:47:05.000Z","updated":"2021-12-17T12:49:30.432Z","comments":true,"path":"api/articles/C-answer.json","keywords":null,"cover":[],"content":"<h2 id=\"1001\"><a href=\"#1001\" class=\"headerlink\" title=\"1001\"></a>1001</h2><p>这道题主要的问题是需要考虑到<strong>输入错误</strong>的时候，<strong>不能继续输出，而是直接退出</strong>。</p>\n<p>考察了scanf的返回值，以及while的判断规则，以及按位取反的操作</p>\n<p>scanf的返回值——-它返回已成功赋值的数据项数；出错时则返回EOF；</p>\n<p>​                            （注：EOF(End Of File)是一个预定义的常量，等于-1.）</p>\n<p>这是一个常见的判断输入正确时，才继续执行的循环判断语句，这个~不是直接在十进制数上加一个负号，而是先把十进制转化为为二进制补码后，然后取反，再转化为10进制。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//下面有关于~的解析</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这道题主要考察了 scanf  的返回值，输入正确时返回输入数据的个数。</p>\n<h2 id=\"1002\"><a href=\"#1002\" class=\"headerlink\" title=\"1002\"></a>1002</h2><p>这道题可用擂台算法，安排1v1，打两局</p>\n<p><img src=\"https://s4.ax1x.com/2021/12/17/TFV7MF.png\" alt=\"TFV7MF.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span>\n        max<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        max<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span>\n        max<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1003\"><a href=\"#1003\" class=\"headerlink\" title=\"1003\"></a>1003</h2><p><strong>[编程入门]密码破译</strong></p>\n<p>需要ASCII码的知识，它是最通用的<a href=\"https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E4%BA%A4%E6%8D%A2/716328\">信息交换</a>标准，在计算机中，所有的数据在<a href=\"https://baike.baidu.com/item/%E5%AD%98%E5%82%A8\">存储</a>和运算时都要使用<a href=\"https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457\">二进制</a>数表示，例如，像a、b、c、d这样的52个字母也需要用二进制来表示。</p>\n<img src=\"https://bkimg.cdn.bcebos.com/pic/e850352ac65c103880a07b53bc119313b17e8941?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UxMTY=,g_7,xp_5,yp_5/format,f_auto\"  />\n\n<p>然后字符串的的长度函数 <strong>strlen（）</strong>可以直接得到字符串的长度，但是需要包含**#include&lt;string.h&gt;**</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t    m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> \n\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"1004\"><a href=\"#1004\" class=\"headerlink\" title=\"1004\"></a>1004</h2><p><strong>[递归]母牛的故事</strong></p>\n<p>递归类型的题目需要找：</p>\n<p>1、重复的</p>\n<p>2、边界</p>\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>母牛数量</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>6</td>\n<td>9</td>\n<td>13</td>\n<td>19</td>\n<td>28</td>\n</tr>\n</tbody></table>\n<p>以上我们可以看出当年份大于等于4时，等于其前一年的加上前三年的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\t\t\n<span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\t<span class=\"token keyword\">int</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tn<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n\t\t\t\th <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> h <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1005\"><a href=\"#1005\" class=\"headerlink\" title=\"1005\"></a><strong>1005</strong></h2><p><strong>温度转换</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">float</span> F<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tC <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>F<span class=\"token operator\">-</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c=%.2f\"</span><span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"1007\"><a href=\"#1007\" class=\"headerlink\" title=\"1007\"></a>1007</h2><h2 id=\"1009\"><a href=\"#1009\" class=\"headerlink\" title=\"1009\"></a>1009</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> lenth<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tlenth <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>lenth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>lenth <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c \"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> lenth <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1011\"><a href=\"#1011\" class=\"headerlink\" title=\"1011\"></a>1011</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> gys<span class=\"token punctuation\">,</span>gbs<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> b <span class=\"token punctuation\">;</span> i<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">&#123;</span>\n\t        gys <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tgbs <span class=\"token operator\">=</span> a<span class=\"token operator\">*</span>b<span class=\"token operator\">/</span>gys<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span>gys<span class=\"token punctuation\">,</span>gbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"1012\"><a href=\"#1012\" class=\"headerlink\" title=\"1012\"></a>1012</h2><p>头文件：&lt;ctype.h&gt;</p>\n<p>函数：</p>\n<p>  （1）int isalpha(int ch);</p>\n<p>​      判断ch是否为字母，如果是返回非0，反之返回0；</p>\n<p>  （2）int isdigit(int ch);</p>\n<p>​      判断ch是否为数字，如果是返回非0，反之返回0；</p>\n<p>  （3）int islower(int ch);</p>\n<p>​      判断ch是否为小写字母，如果是返回非0，反之返回0；</p>\n<p>  （4）int isupper(int ch);</p>\n<p>​      判断ch是否为大写字母，如果是返回非0，反之返回0；</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ctype.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> CC<span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> zm <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>kg <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>qita <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token punctuation\">;</span> CC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> zm<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> kg<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">else</span> qita<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d\"</span><span class=\"token punctuation\">,</span>zm<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>kg<span class=\"token punctuation\">,</span>qita<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"1001这道题主要的问题是需要考虑到输入错误的时候，不能继续输出，而是直接退出。 考察了scanf的返回值，以及while的判断规则，以及按位取反的操作 scanf的返回值——-它返回已成功赋值的数据项数；出错时则返回EOF； ​ （注：EOF(End Of File)是一个预定...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1001\"><span class=\"toc-text\">1001</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1002\"><span class=\"toc-text\">1002</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1003\"><span class=\"toc-text\">1003</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1004\"><span class=\"toc-text\">1004</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1005\"><span class=\"toc-text\">1005</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1007\"><span class=\"toc-text\">1007</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1009\"><span class=\"toc-text\">1009</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1011\"><span class=\"toc-text\">1011</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1012\"><span class=\"toc-text\">1012</span></a></li></ol>","author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"微机原理与接口技术复习笔记","uid":"c7c7d3f34d67a88be91b6acae917b627","slug":"微机原理与接口技术复习笔记","date":"2021-12-19T08:15:17.000Z","updated":"2022-01-03T09:19:29.533Z","comments":true,"path":"api/articles/微机原理与接口技术复习笔记.json","keywords":null,"cover":[],"text":"OK，这是在大三上学期的期末时，写的复习笔记，现在距离考试还有10天左右的时间，我得在这十天内把这学期学习的课程知识全部过一遍，并练一些编程题目。 先把沈老师分享的脑图，记录一下 脑图大纲 这图上面除了右边的具体知识，还有左上角的tips，怎么学？ 这是一个很重要的问题，有些时候...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"课程学习","slug":"课程学习","count":6,"path":"api/categories/课程学习.json"}],"tags":[{"name":"汇编","slug":"汇编","count":2,"path":"api/tags/汇编.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C++核心编程","uid":"67977ad6f38d74e3fc06a55d029d9a0b","slug":"C++核心编程","date":"2021-12-08T14:01:15.000Z","updated":"2021-12-08T14:08:28.042Z","comments":true,"path":"api/articles/C++核心编程.json","keywords":null,"cover":[],"text":"C++核心编程PS:转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。 1 内存分区模型C+...","link":"","photos":[],"count_time":{"symbolsCount":"64k","symbolsTime":"58 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"记录","slug":"记录","count":3,"path":"api/tags/记录.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}