{"title":"C++核心编程","uid":"67977ad6f38d74e3fc06a55d029d9a0b","slug":"C++核心编程","date":"2021-12-08T14:01:15.000Z","updated":"2021-12-08T14:08:28.042Z","comments":true,"path":"api/articles/C++核心编程.json","keywords":null,"cover":[],"content":"<h1 id=\"C-核心编程\"><a href=\"#C-核心编程\" class=\"headerlink\" title=\"C++核心编程\"></a>C++核心编程</h1><h2 id=\"PS-转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。\"><a href=\"#PS-转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。\" class=\"headerlink\" title=\"PS:转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。\"></a>PS:转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。</h2><h2 id=\"😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧\"><a href=\"#😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧\" class=\"headerlink\" title=\"😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧\"></a>😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧</h2><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>\n<h2 id=\"1-内存分区模型\"><a href=\"#1-内存分区模型\" class=\"headerlink\" title=\"1 内存分区模型\"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>\n<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>\n</ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>\n<h3 id=\"1-1-程序运行前\"><a href=\"#1-1-程序运行前\" class=\"headerlink\" title=\"1.1 程序运行前\"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p>​    <strong>代码区：</strong></p>\n<p>​        存放 CPU 执行的机器指令</p>\n<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>​    <strong>全局区：</strong></p>\n<p>​        <strong>全局变量</strong>和<strong>静态变量</strong>存放在此.</p>\n<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>\n<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;全局变量\nint g_a &#x3D; 10;\nint g_b &#x3D; 10;\n\n&#x2F;&#x2F;全局常量\nconst int c_g_a &#x3D; 10;\nconst int c_g_b &#x3D; 10;\n\nint main() &#123;\n\n\t&#x2F;&#x2F;局部变量\n\tint a &#x3D; 10;\n\tint b &#x3D; 10;\n\n\t&#x2F;&#x2F;打印地址\n\tcout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;\n\n\t&#x2F;&#x2F;静态变量\n\tstatic int s_a &#x3D; 10;\n\tstatic int s_b &#x3D; 10;\n\n\tcout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;\n\n\tconst int c_l_a &#x3D; 10;\n\tconst int c_l_b &#x3D; 10;\n\tcout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打印结果：</p>\n<p><img src=\"assets/1545017602518.png\" alt=\"1545017602518\"></p>\n<p>总结：</p>\n<ul>\n<li>C++中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量</li>\n<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>\n</ul>\n<h3 id=\"1-2-程序运行后\"><a href=\"#1-2-程序运行后\" class=\"headerlink\" title=\"1.2 程序运行后\"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>\n<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int * func()\n&#123;\n\tint a &#x3D; 10;\n\treturn &amp;a;\n&#125;\n\nint main() &#123;\n\n\tint *p &#x3D; func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<p>​    <strong>堆区：</strong></p>\n<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>\n<p>​        在C++中主要利用new在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int* func()\n&#123;\n\tint* a &#x3D; new int(10);\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\tint *p &#x3D; func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字进行开辟内存</p>\n<h3 id=\"1-3-new操作符\"><a href=\"#1-3-new操作符\" class=\"headerlink\" title=\"1.3 new操作符\"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>\n<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>\n<p>​    语法：<code> new 数据类型</code></p>\n<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例1： 基本语法</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int* func()\n&#123;\n\tint* a &#x3D; new int(10);\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\tint *p &#x3D; func();\n\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\t&#x2F;&#x2F;利用delete释放堆区数据\n\tdelete p;\n\n\t&#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;报错，释放的空间不可访问\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>示例2：开辟数组</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;堆区开辟数组\nint main() &#123;\n\n\tint* arr &#x3D; new int[10];\n\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tarr[i] &#x3D; i + 100;\n\t&#125;\n\n\tfor (int i &#x3D; 0; i &lt; 10; i++)\n\t&#123;\n\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;释放数组 delete 后加 []\n\tdelete[] arr;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2 引用\"></a>2 引用</h2><h3 id=\"2-1-引用的基本使用\"><a href=\"#2-1-引用的基本使用\" class=\"headerlink\" title=\"2.1 引用的基本使用\"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int main() &#123;\n\n\tint a &#x3D; 10;\n\tint &amp;b &#x3D; a;\n\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tb &#x3D; 100;\n\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h3 id=\"2-2-引用注意事项\"><a href=\"#2-2-引用注意事项\" class=\"headerlink\" title=\"2.2 引用注意事项\"></a>2.2 引用注意事项</h3><ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<p>示例：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int main() &#123;\n\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\t&#x2F;&#x2F;int &amp;c; &#x2F;&#x2F;错误，引用必须初始化\n\tint &amp;c &#x3D; a; &#x2F;&#x2F;一旦初始化后，就不可以更改\n\tc &#x3D; b; &#x2F;&#x2F;这是赋值操作，不是更改引用\n\n\tcout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\tcout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-3-引用做函数参数\"><a href=\"#2-3-引用做函数参数\" class=\"headerlink\" title=\"2.3 引用做函数参数\"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p><strong>优点：</strong>可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;1. 值传递\nvoid mySwap01(int a, int b) &#123;\n\tint temp &#x3D; a;\n\ta &#x3D; b;\n\tb &#x3D; temp;\n&#125;\n\n&#x2F;&#x2F;2. 地址传递\nvoid mySwap02(int* a, int* b) &#123;\n\tint temp &#x3D; *a;\n\t*a &#x3D; *b;\n\t*b &#x3D; temp;\n&#125;\n\n&#x2F;&#x2F;3. 引用传递\nvoid mySwap03(int&amp; a, int&amp; b) &#123;\n\tint temp &#x3D; a;\n\ta &#x3D; b;\n\tb &#x3D; temp;\n&#125;\n\nint main() &#123;\n\n\tint a &#x3D; 10;\n\tint b &#x3D; 20;\n\n\tmySwap01(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap02(&amp;a, &amp;b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tmySwap03(a, b);\n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote>\n<h3 id=\"2-4-引用做函数返回值\"><a href=\"#2-4-引用做函数返回值\" class=\"headerlink\" title=\"2.4 引用做函数返回值\"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为左值</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;返回局部变量引用\nint&amp; test01() &#123;\n\tint a &#x3D; 10; &#x2F;&#x2F;局部变量\n\treturn a;\n&#125;\n\n&#x2F;&#x2F;返回静态变量引用\nint&amp; test02() &#123;\n\tstatic int a &#x3D; 20;\n\treturn a;\n&#125;\n\nint main() &#123;\n\n\t&#x2F;&#x2F;不能返回局部变量的引用\n\tint&amp; ref &#x3D; test01();\n\tcout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;\n\n\t&#x2F;&#x2F;如果函数做左值，那么必须返回引用\n\tint&amp; ref2 &#x3D; test02();\n\tcout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n\ttest02() &#x3D; 1000;\n\n\tcout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>​    </p>\n<h3 id=\"2-5-引用的本质\"><a href=\"#2-5-引用的本质\" class=\"headerlink\" title=\"2.5 引用的本质\"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<p>讲解示例：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;发现是引用，转换为 int* const ref &#x3D; &amp;a;\nvoid func(int&amp; ref)&#123;\n\tref &#x3D; 100; &#x2F;&#x2F; ref是引用，转换为*ref &#x3D; 100\n&#125;\nint main()&#123;\n\tint a &#x3D; 10;\n    \n    &#x2F;&#x2F;自动转换为 int* const ref &#x3D; &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改\n\tint&amp; ref &#x3D; a; \n\tref &#x3D; 20; &#x2F;&#x2F;内部发现ref是引用，自动帮我们转换为: *ref &#x3D; 20;\n    \n\tcout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;\n    \n\tfunc(a);\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h3 id=\"2-6-常量引用\"><a href=\"#2-6-常量引用\" class=\"headerlink\" title=\"2.6 常量引用\"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;引用使用的场景，通常用来修饰形参\nvoid showValue(const int&amp; v) &#123;\n\t&#x2F;&#x2F;v +&#x3D; 10;\n\tcout &lt;&lt; v &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\t&#x2F;&#x2F;int&amp; ref &#x3D; 10;  引用本身需要一个合法的内存空间，因此这行错误\n\t&#x2F;&#x2F;加入const就可以了，编译器优化代码，int temp &#x3D; 10; const int&amp; ref &#x3D; temp;\n\tconst int&amp; ref &#x3D; 10;\n\n\t&#x2F;&#x2F;ref &#x3D; 100;  &#x2F;&#x2F;加入const后不可以修改变量\n\tcout &lt;&lt; ref &lt;&lt; endl;\n\n\t&#x2F;&#x2F;函数中利用常量引用防止误操作修改实参\n\tint a &#x3D; 10;\n\tshowValue(a);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h2 id=\"3-函数提高\"><a href=\"#3-函数提高\" class=\"headerlink\" title=\"3 函数提高\"></a>3 函数提高</h2><h3 id=\"3-1-函数默认参数\"><a href=\"#3-1-函数默认参数\" class=\"headerlink\" title=\"3.1 函数默认参数\"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">int func(int a, int b &#x3D; 10, int c &#x3D; 10) &#123;\n\treturn a + b + c;\n&#125;\n\n&#x2F;&#x2F;1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值\n&#x2F;&#x2F;2. 如果函数声明有默认值，函数实现的时候就不能有默认参数\nint func2(int a &#x3D; 10, int b &#x3D; 10);\nint func2(int a, int b) &#123;\n\treturn a + b;\n&#125;\n\nint main() &#123;\n\n\tcout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(100) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h3 id=\"3-2-函数占位参数\"><a href=\"#3-2-函数占位参数\" class=\"headerlink\" title=\"3.2 函数占位参数\"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;函数占位参数 ，占位参数也可以有默认参数\nvoid func(int a, int) &#123;\n\tcout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\tfunc(10,10); &#x2F;&#x2F;占位参数必须填补\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-函数重载\"><a href=\"#3-3-函数重载\" class=\"headerlink\" title=\"3.3 函数重载\"></a>3.3 函数重载</h3><h4 id=\"3-3-1-函数重载概述\"><a href=\"#3-3-1-函数重载概述\" class=\"headerlink\" title=\"3.3.1 函数重载概述\"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;函数重载需要函数都在同一个作用域下\nvoid func()\n&#123;\n\tcout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a)\n&#123;\n\tcout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a)\n&#123;\n\tcout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(int a ,double b)\n&#123;\n\tcout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;\n&#125;\nvoid func(double a ,int b)\n&#123;\n\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;函数返回值不可以作为函数重载条件\n&#x2F;&#x2F;int func(double a, int b)\n&#x2F;&#x2F;&#123;\n&#x2F;&#x2F;\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;\n&#x2F;&#x2F;&#125;\n\n\nint main() &#123;\n\n\tfunc();\n\tfunc(10);\n\tfunc(3.14);\n\tfunc(10,3.14);\n\tfunc(3.14 , 10);\n\t\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"3-3-2-函数重载注意事项\"><a href=\"#3-3-2-函数重载注意事项\" class=\"headerlink\" title=\"3.3.2 函数重载注意事项\"></a>3.3.2 函数重载注意事项</h4><ul>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;函数重载注意事项\n&#x2F;&#x2F;1、引用作为重载条件\n\nvoid func(int &amp;a)\n&#123;\n\tcout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\nvoid func(const int &amp;a)\n&#123;\n\tcout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;\n&#125;\n\n\n&#x2F;&#x2F;2、函数重载碰到函数默认参数\n\nvoid func2(int a, int b &#x3D; 10)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a, int b &#x3D; 10) 调用&quot; &lt;&lt; endl;\n&#125;\n\nvoid func2(int a)\n&#123;\n\tcout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\t\n\tint a &#x3D; 10;\n\tfunc(a); &#x2F;&#x2F;调用无const\n\tfunc(10);&#x2F;&#x2F;调用有const\n\n\n\t&#x2F;&#x2F;func2(10); &#x2F;&#x2F;碰到默认参数产生歧义，需要避免\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h2 id=\"4-类和对象\"><a href=\"#4-类和对象\" class=\"headerlink\" title=\"4 类和对象\"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>\n<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>\n<p><strong>例如：</strong></p>\n<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>\n<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>\n<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>\n<h3 id=\"4-1-封装\"><a href=\"#4-1-封装\" class=\"headerlink\" title=\"4.1 封装\"></a>4.1 封装</h3><h4 id=\"4-1-1-封装的意义\"><a href=\"#4-1-1-封装的意义\" class=\"headerlink\" title=\"4.1.1  封装的意义\"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>\n<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>\n<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;圆周率\nconst double PI &#x3D; 3.14;\n\n&#x2F;&#x2F;1、封装的意义\n&#x2F;&#x2F;将属性和行为作为一个整体，用来表现生活中的事物\n\n&#x2F;&#x2F;封装一个圆类，求圆的周长\n&#x2F;&#x2F;class代表设计一个类，后面跟着的是类名\nclass Circle\n&#123;\npublic:  &#x2F;&#x2F;访问权限  公共的权限\n\n\t&#x2F;&#x2F;属性\n\tint m_r;&#x2F;&#x2F;半径\n\n\t&#x2F;&#x2F;行为\n\t&#x2F;&#x2F;获取到圆的周长\n\tdouble calculateZC()\n\t&#123;\n\t\t&#x2F;&#x2F;2 * pi  * r\n\t\t&#x2F;&#x2F;获取圆的周长\n\t\treturn  2 * PI * m_r;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\t&#x2F;&#x2F;通过圆类，创建圆的对象\n\t&#x2F;&#x2F; c1就是一个具体的圆\n\tCircle c1;\n\tc1.m_r &#x3D; 10; &#x2F;&#x2F;给圆对象的半径 进行赋值操作\n\n\t&#x2F;&#x2F;2 * pi * 10 &#x3D; &#x3D; 62.8\n\tcout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>\n<p><strong>示例2代码：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;学生类\nclass Student &#123;\npublic:\n\tvoid setName(string name) &#123;\n\t\tm_name &#x3D; name;\n\t&#125;\n\tvoid setID(int id) &#123;\n\t\tm_id &#x3D; id;\n\t&#125;\n\n\tvoid showStudent() &#123;\n\t\tcout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;\n\t&#125;\npublic:\n\tstring m_name;\n\tint m_id;\n&#125;;\n\nint main() &#123;\n\n\tStudent stu;\n\tstu.setName(&quot;德玛西亚&quot;);\n\tstu.setID(250);\n\tstu.showStudent();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限  </li>\n<li>protected 保护权限</li>\n<li>private      私有权限</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;三种权限\n&#x2F;&#x2F;公共权限  public     类内可以访问  类外可以访问\n&#x2F;&#x2F;保护权限  protected  类内可以访问  类外不可以访问\n&#x2F;&#x2F;私有权限  private    类内可以访问  类外不可以访问\n\nclass Person\n&#123;\n\t&#x2F;&#x2F;姓名  公共权限\npublic:\n\tstring m_Name;\n\n\t&#x2F;&#x2F;汽车  保护权限\nprotected:\n\tstring m_Car;\n\n\t&#x2F;&#x2F;银行卡密码  私有权限\nprivate:\n\tint m_Password;\n\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_Name &#x3D; &quot;张三&quot;;\n\t\tm_Car &#x3D; &quot;拖拉机&quot;;\n\t\tm_Password &#x3D; 123456;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tPerson p;\n\tp.m_Name &#x3D; &quot;李四&quot;;\n\t&#x2F;&#x2F;p.m_Car &#x3D; &quot;奔驰&quot;;  &#x2F;&#x2F;保护权限类外访问不到\n\t&#x2F;&#x2F;p.m_Password &#x3D; 123; &#x2F;&#x2F;私有权限类外访问不到\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h4 id=\"4-1-2-struct和class区别\"><a href=\"#4-1-2-struct和class区别\" class=\"headerlink\" title=\"4.1.2 struct和class区别\"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class C1\n&#123;\n\tint  m_A; &#x2F;&#x2F;默认是私有权限\n&#125;;\n\nstruct C2\n&#123;\n\tint m_A;  &#x2F;&#x2F;默认是公共权限\n&#125;;\n\nint main() &#123;\n\n\tC1 c1;\n\tc1.m_A &#x3D; 10; &#x2F;&#x2F;错误，访问权限是私有\n\n\tC2 c2;\n\tc2.m_A &#x3D; 10; &#x2F;&#x2F;正确，访问权限是公共\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-1-3-成员属性设置为私有\"><a href=\"#4-1-3-成员属性设置为私有\" class=\"headerlink\" title=\"4.1.3 成员属性设置为私有\"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>\n<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\n\t&#x2F;&#x2F;姓名设置可读可写\n\tvoid setName(string name) &#123;\n\t\tm_Name &#x3D; name;\n\t&#125;\n\tstring getName()\n\t&#123;\n\t\treturn m_Name;\n\t&#125;\n\n\n\t&#x2F;&#x2F;获取年龄 \n\tint getAge() &#123;\n\t\treturn m_Age;\n\t&#125;\n\t&#x2F;&#x2F;设置年龄\n\tvoid setAge(int age) &#123;\n\t\tif (age &lt; 0 || age &gt; 150) &#123;\n\t\t\tcout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;\n\t\t\treturn;\n\t\t&#125;\n\t\tm_Age &#x3D; age;\n\t&#125;\n\n\t&#x2F;&#x2F;情人设置为只写\n\tvoid setLover(string lover) &#123;\n\t\tm_Lover &#x3D; lover;\n\t&#125;\n\nprivate:\n\tstring m_Name; &#x2F;&#x2F;可读可写  姓名\n\t\n\tint m_Age; &#x2F;&#x2F;只读  年龄\n\n\tstring m_Lover; &#x2F;&#x2F;只写  情人\n&#125;;\n\n\nint main() &#123;\n\n\tPerson p;\n\t&#x2F;&#x2F;姓名设置\n\tp.setName(&quot;张三&quot;);\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;\n\n\t&#x2F;&#x2F;年龄设置\n\tp.setAge(50);\n\tcout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;\n\n\t&#x2F;&#x2F;情人设置\n\tp.setLover(&quot;苍井&quot;);\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  &#x2F;&#x2F;只写属性，不可以读取\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<p><strong>练习案例1：设计立方体类</strong></p>\n<p>设计立方体类(Cube)</p>\n<p>求出立方体的面积和体积</p>\n<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>\n<p><img src=\"assets/1545533548532.png\" alt=\"1545533548532\"></p>\n<p><strong>练习案例2：点和圆的关系</strong></p>\n<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>\n<p><img src=\"assets/1545533829184.png\" alt=\"1545533829184\"></p>\n<h3 id=\"4-2-对象的初始化和清理\"><a href=\"#4-2-对象的初始化和清理\" class=\"headerlink\" title=\"4.2 对象的初始化和清理\"></a>4.2 对象的初始化和清理</h3><ul>\n<li> 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>\n<li> C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>\n</ul>\n<h4 id=\"4-2-1-构造函数和析构函数\"><a href=\"#4-2-1-构造函数和析构函数\" class=\"headerlink\" title=\"4.2.1 构造函数和析构函数\"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>\n<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此可以发生重载</li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写void</li>\n<li>函数名称与类名相同,在名称前加上符号  ~</li>\n<li>析构函数不可以有参数，因此不可以发生重载</li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>\n</ol>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\npublic:\n\t&#x2F;&#x2F;构造函数\n\tPerson()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;析构函数\n\t~Person()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p;\n&#125;\n\nint main() &#123;\n\t\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-2-构造函数的分类及调用\"><a href=\"#4-2-2-构造函数的分类及调用\" class=\"headerlink\" title=\"4.2.2 构造函数的分类及调用\"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>\n<p>​    按参数分为： 有参构造和无参构造</p>\n<p>​    按类型分为： 普通构造和拷贝构造</p>\n<p>三种调用方式：</p>\n<p>​    括号法</p>\n<p>​    显示法</p>\n<p>​    隐式转换法</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;1、构造函数分类\n&#x2F;&#x2F; 按照参数分类分为 有参和无参构造   无参又称为默认构造函数\n&#x2F;&#x2F; 按照类型分类分为 普通构造和拷贝构造\n\nclass Person &#123;\npublic:\n\t&#x2F;&#x2F;无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;有参构造函数\n\tPerson(int a) &#123;\n\t\tage &#x3D; a;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;拷贝构造函数\n\tPerson(const Person&amp; p) &#123;\n\t\tage &#x3D; p.age;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint age;\n&#125;;\n\n&#x2F;&#x2F;2、构造函数的调用\n&#x2F;&#x2F;调用无参构造函数\nvoid test01() &#123;\n\tPerson p; &#x2F;&#x2F;调用无参构造函数\n&#125;\n\n&#x2F;&#x2F;调用有参的构造函数\nvoid test02() &#123;\n\n\t&#x2F;&#x2F;2.1  括号法，常用\n\tPerson p1(10);\n\t&#x2F;&#x2F;注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明\n\t&#x2F;&#x2F;Person p2();\n\n\t&#x2F;&#x2F;2.2 显式法\n\tPerson p2 &#x3D; Person(10); \n\tPerson p3 &#x3D; Person(p2);\n\t&#x2F;&#x2F;Person(10)单独写就是匿名对象  当前行结束之后，马上析构\n\n\t&#x2F;&#x2F;2.3 隐式转换法\n\tPerson p4 &#x3D; 10; &#x2F;&#x2F; Person p4 &#x3D; Person(10); \n\tPerson p5 &#x3D; p4; &#x2F;&#x2F; Person p5 &#x3D; Person(p4); \n\n\t&#x2F;&#x2F;注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明\n\t&#x2F;&#x2F;Person p5(p4);\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\t&#x2F;&#x2F;test02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-3-拷贝构造函数调用时机\"><a href=\"#4-2-3-拷贝构造函数调用时机\" class=\"headerlink\" title=\"4.2.3 拷贝构造函数调用时机\"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge &#x3D; 0;\n\t&#125;\n\tPerson(int age) &#123;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t\tmAge &#x3D; age;\n\t&#125;\n\tPerson(const Person&amp; p) &#123;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t\tmAge &#x3D; p.mAge;\n\t&#125;\n\t&#x2F;&#x2F;析构函数在释放内存之前调用\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint mAge;\n&#125;;\n\n&#x2F;&#x2F;1. 使用一个已经创建完毕的对象来初始化一个新对象\nvoid test01() &#123;\n\n\tPerson man(100); &#x2F;&#x2F;p对象已经创建完毕\n\tPerson newman(man); &#x2F;&#x2F;调用拷贝构造函数\n\tPerson newman2 &#x3D; man; &#x2F;&#x2F;拷贝构造\n\n\t&#x2F;&#x2F;Person newman3;\n\t&#x2F;&#x2F;newman3 &#x3D; man; &#x2F;&#x2F;不是调用拷贝构造函数，赋值操作\n&#125;\n\n&#x2F;&#x2F;2. 值传递的方式给函数参数传值\n&#x2F;&#x2F;相当于Person p1 &#x3D; p;\nvoid doWork(Person p1) &#123;&#125;\nvoid test02() &#123;\n\tPerson p; &#x2F;&#x2F;无参构造函数\n\tdoWork(p);\n&#125;\n\n&#x2F;&#x2F;3. 以值方式返回局部对象\nPerson doWork2()\n&#123;\n\tPerson p1;\n\tcout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;\n\treturn p1;\n&#125;\n\nvoid test03()\n&#123;\n\tPerson p &#x3D; doWork2();\n\tcout &lt;&lt; (int *)&amp;p &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\n\t&#x2F;&#x2F;test01();\n\t&#x2F;&#x2F;test02();\n\ttest03();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"4-2-4-构造函数调用规则\"><a href=\"#4-2-4-构造函数调用规则\" class=\"headerlink\" title=\"4.2.4 构造函数调用规则\"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>\n</ul>\n<ul>\n<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>\n</ul>\n<p>示例：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\t&#x2F;&#x2F;无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;有参构造函数\n\tPerson(int a) &#123;\n\t\tage &#x3D; a;\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;拷贝构造函数\n\tPerson(const Person&amp; p) &#123;\n\t\tage &#x3D; p.age;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint age;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(18);\n\t&#x2F;&#x2F;如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作\n\tPerson p2(p1);\n\n\tcout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;\n&#125;\n\nvoid test02()\n&#123;\n\t&#x2F;&#x2F;如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造\n\tPerson p1; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错\n\tPerson p2(10); &#x2F;&#x2F;用户提供的有参\n\tPerson p3(p2); &#x2F;&#x2F;此时如果用户没有提供拷贝构造，编译器会提供\n\n\t&#x2F;&#x2F;如果用户提供拷贝构造，编译器不会提供其他构造函数\n\tPerson p4; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错\n\tPerson p5(10); &#x2F;&#x2F;此时如果用户自己没有提供有参，会出错\n\tPerson p6(p5); &#x2F;&#x2F;用户自己提供拷贝构造\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-5-深拷贝与浅拷贝\"><a href=\"#4-2-5-深拷贝与浅拷贝\" class=\"headerlink\" title=\"4.2.5 深拷贝与浅拷贝\"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\t&#x2F;&#x2F;无参（默认）构造函数\n\tPerson() &#123;\n\t\tcout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;有参构造函数\n\tPerson(int age ,int height) &#123;\n\t\t\n\t\tcout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;\n\n\t\tm_age &#x3D; age;\n\t\tm_height &#x3D; new int(height);\n\t\t\n\t&#125;\n\t&#x2F;&#x2F;拷贝构造函数  \n\tPerson(const Person&amp; p) &#123;\n\t\tcout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;\n\t\t&#x2F;&#x2F;如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\t\tm_age &#x3D; p.m_age;\n\t\tm_height &#x3D; new int(*p.m_height);\n\t\t\n\t&#125;\n\n\t&#x2F;&#x2F;析构函数\n\t~Person() &#123;\n\t\tcout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;\n\t\tif (m_height !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_height;\n\t\t&#125;\n\t&#125;\npublic:\n\tint m_age;\n\tint* m_height;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(18, 180);\n\n\tPerson p2(p1);\n\n\tcout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote>\n<h4 id=\"4-2-6-初始化列表\"><a href=\"#4-2-6-初始化列表\" class=\"headerlink\" title=\"4.2.6 初始化列表\"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>\n<p>C++提供了初始化列表语法，用来初始化属性</p>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\n\t&#x2F;&#x2F;&#x2F;&#x2F;传统方式初始化\n\t&#x2F;&#x2F;Person(int a, int b, int c) &#123;\n\t&#x2F;&#x2F;\tm_A &#x3D; a;\n\t&#x2F;&#x2F;\tm_B &#x3D; b;\n\t&#x2F;&#x2F;\tm_C &#x3D; c;\n\t&#x2F;&#x2F;&#125;\n\n\t&#x2F;&#x2F;初始化列表方式初始化\n\tPerson(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;\n\tvoid PrintPerson() &#123;\n\t\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;\n\t\tcout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;\n\t&#125;\nprivate:\n\tint m_A;\n\tint m_B;\n\tint m_C;\n&#125;;\n\nint main() &#123;\n\n\tPerson p(1, 2, 3);\n\tp.PrintPerson();\n\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"4-2-7-类对象作为类成员\"><a href=\"#4-2-7-类对象作为类成员\" class=\"headerlink\" title=\"4.2.7 类对象作为类成员\"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class A &#123;&#125;\nclass B\n&#123;\n    A a；\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>B类中有对象A作为成员，A为对象成员</p>\n<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Phone\n&#123;\npublic:\n\tPhone(string name)\n\t&#123;\n\t\tm_PhoneName &#x3D; name;\n\t\tcout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Phone()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_PhoneName;\n\n&#125;;\n\n\nclass Person\n&#123;\npublic:\n\n\t&#x2F;&#x2F;初始化列表可以告诉编译器调用哪一个构造函数\n\tPerson(string name, string pName) :m_Name(name), m_Phone(pName)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;\n\t&#125;\n\n\t~Person()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid playGame()\n\t&#123;\n\t\tcout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;\n\t&#125;\n\n\tstring m_Name;\n\tPhone m_Phone;\n\n&#125;;\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;当类中成员是其他类对象时，我们称该成员为 对象成员\n\t&#x2F;&#x2F;构造的顺序是 ：先调用对象成员的构造，再调用本类构造\n\t&#x2F;&#x2F;析构顺序与构造相反\n\tPerson p(&quot;张三&quot; , &quot;苹果X&quot;);\n\tp.playGame();\n\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-8-静态成员\"><a href=\"#4-2-8-静态成员\" class=\"headerlink\" title=\"4.2.8 静态成员\"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li> 所有对象共享同一份数据</li>\n<li> 在编译阶段分配内存</li>\n<li> 类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li> 所有对象共享同一个函数</li>\n<li> 静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例1 ：</strong>静态成员变量</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\n\t\npublic:\n\n\tstatic int m_A; &#x2F;&#x2F;静态成员变量\n\n\t&#x2F;&#x2F;静态成员变量特点：\n\t&#x2F;&#x2F;1 在编译阶段分配内存\n\t&#x2F;&#x2F;2 类内声明，类外初始化\n\t&#x2F;&#x2F;3 所有对象共享同一份数据\n\nprivate:\n\tstatic int m_B; &#x2F;&#x2F;静态成员变量也是有访问权限的\n&#125;;\nint Person::m_A &#x3D; 10;\nint Person::m_B &#x3D; 10;\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;静态成员变量两种访问方式\n\n\t&#x2F;&#x2F;1、通过对象\n\tPerson p1;\n\tp1.m_A &#x3D; 100;\n\tcout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl;\n\n\tPerson p2;\n\tp2.m_A &#x3D; 200;\n\tcout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl; &#x2F;&#x2F;共享同一份数据\n\tcout &lt;&lt; &quot;p2.m_A &#x3D; &quot; &lt;&lt; p2.m_A &lt;&lt; endl;\n\n\t&#x2F;&#x2F;2、通过类名\n\tcout &lt;&lt; &quot;m_A &#x3D; &quot; &lt;&lt; Person::m_A &lt;&lt; endl;\n\n\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;m_B &#x3D; &quot; &lt;&lt; Person::m_B &lt;&lt; endl; &#x2F;&#x2F;私有权限访问不到\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>示例2：</strong>静态成员函数</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\n\npublic:\n\n\t&#x2F;&#x2F;静态成员函数特点：\n\t&#x2F;&#x2F;1 程序共享一个函数\n\t&#x2F;&#x2F;2 静态成员函数只能访问静态成员变量\n\t\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;\n\t\tm_A &#x3D; 100;\n\t\t&#x2F;&#x2F;m_B &#x3D; 100; &#x2F;&#x2F;错误，不可以访问非静态成员变量\n\t&#125;\n\n\tstatic int m_A; &#x2F;&#x2F;静态成员变量\n\tint m_B; &#x2F;&#x2F; \nprivate:\n\n\t&#x2F;&#x2F;静态成员函数也是有访问权限的\n\tstatic void func2()\n\t&#123;\n\t\tcout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\nint Person::m_A &#x3D; 10;\n\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;静态成员变量两种访问方式\n\n\t&#x2F;&#x2F;1、通过对象\n\tPerson p1;\n\tp1.func();\n\n\t&#x2F;&#x2F;2、通过类名\n\tPerson::func();\n\n\n\t&#x2F;&#x2F;Person::func2(); &#x2F;&#x2F;私有权限访问不到\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-3-C-对象模型和this指针\"><a href=\"#4-3-C-对象模型和this指针\" class=\"headerlink\" title=\"4.3 C++对象模型和this指针\"></a>4.3 C++对象模型和this指针</h3><h4 id=\"4-3-1-成员变量和成员函数分开存储\"><a href=\"#4-3-1-成员变量和成员函数分开存储\" class=\"headerlink\" title=\"4.3.1 成员变量和成员函数分开存储\"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tmA &#x3D; 0;\n\t&#125;\n\t&#x2F;&#x2F;非静态成员变量占对象空间\n\tint mA;\n\t&#x2F;&#x2F;静态成员变量不占对象空间\n\tstatic int mB; \n\t&#x2F;&#x2F;函数也不占对象空间，所有函数共享一个函数实例\n\tvoid func() &#123;\n\t\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;静态成员函数也不占对象空间\n\tstatic void sfunc() &#123;\n\t&#125;\n&#125;;\n\nint main() &#123;\n\n\tcout &lt;&lt; sizeof(Person) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h4 id=\"4-3-2-this指针概念\"><a href=\"#4-3-2-this指针概念\" class=\"headerlink\" title=\"4.3.2 this指针概念\"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>\n<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>\n<p>this指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this指针不需要定义，直接使用即可</p>\n<p>this指针的用途：</p>\n<ul>\n<li> 当形参和成员变量同名时，可用this指针来区分</li>\n<li> 在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t&#x2F;&#x2F;1、当形参和成员变量同名时，可用this指针来区分\n\t\tthis-&gt;age &#x3D; age;\n\t&#125;\n\n\tPerson&amp; PersonAddPerson(Person p)\n\t&#123;\n\t\tthis-&gt;age +&#x3D; p.age;\n\t\t&#x2F;&#x2F;返回对象本身\n\t\treturn *this;\n\t&#125;\n\n\tint age;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson p1(10);\n\tcout &lt;&lt; &quot;p1.age &#x3D; &quot; &lt;&lt; p1.age &lt;&lt; endl;\n\n\tPerson p2(10);\n\tp2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);\n\tcout &lt;&lt; &quot;p2.age &#x3D; &quot; &lt;&lt; p2.age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-3-空指针访问成员函数\"><a href=\"#4-3-3-空指针访问成员函数\" class=\"headerlink\" title=\"4.3.3 空指针访问成员函数\"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;空指针访问成员函数\nclass Person &#123;\npublic:\n\n\tvoid ShowClassName() &#123;\n\t\tcout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid ShowPerson() &#123;\n\t\tif (this &#x3D;&#x3D; NULL) &#123;\n\t\t\treturn;\n\t\t&#125;\n\t\tcout &lt;&lt; mAge &lt;&lt; endl;\n\t&#125;\n\npublic:\n\tint mAge;\n&#125;;\n\nvoid test01()\n&#123;\n\tPerson * p &#x3D; NULL;\n\tp-&gt;ShowClassName(); &#x2F;&#x2F;空指针，可以调用成员函数\n\tp-&gt;ShowPerson();  &#x2F;&#x2F;但是如果成员函数中用到了this指针，就不可以了\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-4-const修饰成员函数\"><a href=\"#4-3-4-const修饰成员函数\" class=\"headerlink\" title=\"4.3.4 const修饰成员函数\"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加const称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;\n\t\tm_A &#x3D; 0;\n\t\tm_B &#x3D; 0;\n\t&#125;\n\n\t&#x2F;&#x2F;this指针的本质是一个指针常量，指针的指向不可修改\n\t&#x2F;&#x2F;如果想让指针指向的值也不可以修改，需要声明常函数\n\tvoid ShowPerson() const &#123;\n\t\t&#x2F;&#x2F;const Type* const pointer;\n\t\t&#x2F;&#x2F;this &#x3D; NULL; &#x2F;&#x2F;不能修改指针的指向 Person* const this;\n\t\t&#x2F;&#x2F;this-&gt;mA &#x3D; 100; &#x2F;&#x2F;但是this指针指向的对象的数据是可以修改的\n\n\t\t&#x2F;&#x2F;const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量\n\t\tthis-&gt;m_B &#x3D; 100;\n\t&#125;\n\n\tvoid MyFunc() const &#123;\n\t\t&#x2F;&#x2F;mA &#x3D; 10000;\n\t&#125;\n\npublic:\n\tint m_A;\n\tmutable int m_B; &#x2F;&#x2F;可修改 可变的\n&#125;;\n\n\n&#x2F;&#x2F;const修饰对象  常对象\nvoid test01() &#123;\n\n\tconst Person person; &#x2F;&#x2F;常量对象  \n\tcout &lt;&lt; person.m_A &lt;&lt; endl;\n\t&#x2F;&#x2F;person.mA &#x3D; 100; &#x2F;&#x2F;常对象不能修改成员变量的值,但是可以访问\n\tperson.m_B &#x3D; 100; &#x2F;&#x2F;但是常对象可以修改mutable修饰成员变量\n\n\t&#x2F;&#x2F;常对象访问成员函数\n\tperson.MyFunc(); &#x2F;&#x2F;常对象不能调用const的函数\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n<h3 id=\"4-4-友元\"><a href=\"#4-4-友元\" class=\"headerlink\" title=\"4.4 友元\"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为  ==friend==</p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n<h4 id=\"4-4-1-全局函数做友元\"><a href=\"#4-4-1-全局函数做友元\" class=\"headerlink\" title=\"4.4.1 全局函数做友元\"></a>4.4.1 全局函数做友元</h4><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Building\n&#123;\n\t&#x2F;&#x2F;告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容\n\tfriend void goodGay(Building * building);\n\npublic:\n\n\tBuilding()\n\t&#123;\n\t\tthis-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;\n\t\tthis-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;\n\t&#125;\n\n\npublic:\n\tstring m_SittingRoom; &#x2F;&#x2F;客厅\n\nprivate:\n\tstring m_BedRoom; &#x2F;&#x2F;卧室\n&#125;;\n\n\nvoid goodGay(Building * building)\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\n\nvoid test01()\n&#123;\n\tBuilding b;\n\tgoodGay(&amp;b);\n&#125;\n\nint main()&#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-4-2-类做友元\"><a href=\"#4-4-2-类做友元\" class=\"headerlink\" title=\"4.4.2 类做友元\"></a>4.4.2 类做友元</h4><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Building;\nclass goodGay\n&#123;\npublic:\n\n\tgoodGay();\n\tvoid visit();\n\nprivate:\n\tBuilding *building;\n&#125;;\n\n\nclass Building\n&#123;\n\t&#x2F;&#x2F;告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容\n\tfriend class goodGay;\n\npublic:\n\tBuilding();\n\npublic:\n\tstring m_SittingRoom; &#x2F;&#x2F;客厅\nprivate:\n\tstring m_BedRoom;&#x2F;&#x2F;卧室\n&#125;;\n\nBuilding::Building()\n&#123;\n\tthis-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;\n\tthis-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;\n&#125;\n\ngoodGay::goodGay()\n&#123;\n\tbuilding &#x3D; new Building;\n&#125;\n\nvoid goodGay::visit()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid test01()\n&#123;\n\tgoodGay gg;\n\tgg.visit();\n\n&#125;\n\nint main()&#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"4-4-3-成员函数做友元\"><a href=\"#4-4-3-成员函数做友元\" class=\"headerlink\" title=\"4.4.3 成员函数做友元\"></a>4.4.3 成员函数做友元</h4><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Building;\nclass goodGay\n&#123;\npublic:\n\n\tgoodGay();\n\tvoid visit(); &#x2F;&#x2F;只让visit函数作为Building的好朋友，可以发访问Building中私有内容\n\tvoid visit2(); \n\nprivate:\n\tBuilding *building;\n&#125;;\n\n\nclass Building\n&#123;\n\t&#x2F;&#x2F;告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容\n\tfriend void goodGay::visit();\n\npublic:\n\tBuilding();\n\npublic:\n\tstring m_SittingRoom; &#x2F;&#x2F;客厅\nprivate:\n\tstring m_BedRoom;&#x2F;&#x2F;卧室\n&#125;;\n\nBuilding::Building()\n&#123;\n\tthis-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;\n\tthis-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;\n&#125;\n\ngoodGay::goodGay()\n&#123;\n\tbuilding &#x3D; new Building;\n&#125;\n\nvoid goodGay::visit()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid goodGay::visit2()\n&#123;\n\tcout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;\n&#125;\n\nvoid test01()\n&#123;\n\tgoodGay  gg;\n\tgg.visit();\n\n&#125;\n\nint main()&#123;\n    \n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-5-运算符重载\"><a href=\"#4-5-运算符重载\" class=\"headerlink\" title=\"4.5 运算符重载\"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>\n<h4 id=\"4-5-1-加号运算符重载\"><a href=\"#4-5-1-加号运算符重载\" class=\"headerlink\" title=\"4.5.1 加号运算符重载\"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\npublic:\n\tPerson() &#123;&#125;;\n\tPerson(int a, int b)\n\t&#123;\n\t\tthis-&gt;m_A &#x3D; a;\n\t\tthis-&gt;m_B &#x3D; b;\n\t&#125;\n\t&#x2F;&#x2F;成员函数实现 + 号运算符重载\n\tPerson operator+(const Person&amp; p) &#123;\n\t\tPerson temp;\n\t\ttemp.m_A &#x3D; this-&gt;m_A + p.m_A;\n\t\ttemp.m_B &#x3D; this-&gt;m_B + p.m_B;\n\t\treturn temp;\n\t&#125;\n\n\npublic:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n&#x2F;&#x2F;全局函数实现 + 号运算符重载\n&#x2F;&#x2F;Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;\n&#x2F;&#x2F;\tPerson temp(0, 0);\n&#x2F;&#x2F;\ttemp.m_A &#x3D; p1.m_A + p2.m_A;\n&#x2F;&#x2F;\ttemp.m_B &#x3D; p1.m_B + p2.m_B;\n&#x2F;&#x2F;\treturn temp;\n&#x2F;&#x2F;&#125;\n\n&#x2F;&#x2F;运算符重载 可以发生函数重载 \nPerson operator+(const Person&amp; p2, int val)  \n&#123;\n\tPerson temp;\n\ttemp.m_A &#x3D; p2.m_A + val;\n\ttemp.m_B &#x3D; p2.m_B + val;\n\treturn temp;\n&#125;\n\nvoid test() &#123;\n\n\tPerson p1(10, 10);\n\tPerson p2(20, 20);\n\n\t&#x2F;&#x2F;成员函数方式\n\tPerson p3 &#x3D; p2 + p1;  &#x2F;&#x2F;相当于 p2.operaor+(p1)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;\n\n\n\tPerson p4 &#x3D; p3 + 10; &#x2F;&#x2F;相当于 operator+(p3,10)\n\tcout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\ttest();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结2：不要滥用运算符重载</p></blockquote>\n<h4 id=\"4-5-2-左移运算符重载\"><a href=\"#4-5-2-左移运算符重载\" class=\"headerlink\" title=\"4.5.2 左移运算符重载\"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person &#123;\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);\n\npublic:\n\n\tPerson(int a, int b)\n\t&#123;\n\t\tthis-&gt;m_A &#x3D; a;\n\t\tthis-&gt;m_B &#x3D; b;\n\t&#125;\n\n\t&#x2F;&#x2F;成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果\n\t&#x2F;&#x2F;void operator&lt;&lt;(Person&amp; p)&#123;\n\t&#x2F;&#x2F;&#125;\n\nprivate:\n\tint m_A;\n\tint m_B;\n&#125;;\n\n&#x2F;&#x2F;全局函数实现左移重载\n&#x2F;&#x2F;ostream对象只能有一个\nostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;\n\tout &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;\n\treturn out;\n&#125;\n\nvoid test() &#123;\n\n\tPerson p1(10, 20);\n\n\tcout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; &#x2F;&#x2F;链式编程\n&#125;\n\nint main() &#123;\n\n\ttest();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote>\n<h4 id=\"4-5-3-递增运算符重载\"><a href=\"#4-5-3-递增运算符重载\" class=\"headerlink\" title=\"4.5.3 递增运算符重载\"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class MyInteger &#123;\n\n\tfriend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);\n\npublic:\n\tMyInteger() &#123;\n\t\tm_Num &#x3D; 0;\n\t&#125;\n\t&#x2F;&#x2F;前置++\n\tMyInteger&amp; operator++() &#123;\n\t\t&#x2F;&#x2F;先++\n\t\tm_Num++;\n\t\t&#x2F;&#x2F;再返回\n\t\treturn *this;\n\t&#125;\n\n\t&#x2F;&#x2F;后置++\n\tMyInteger operator++(int) &#123;\n\t\t&#x2F;&#x2F;先返回\n\t\tMyInteger temp &#x3D; *this; &#x2F;&#x2F;记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；\n\t\tm_Num++;\n\t\treturn temp;\n\t&#125;\n\nprivate:\n\tint m_Num;\n&#125;;\n\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;\n\tout &lt;&lt; myint.m_Num;\n\treturn out;\n&#125;\n\n\n&#x2F;&#x2F;前置++ 先++ 再返回\nvoid test01() &#123;\n\tMyInteger myInt;\n\tcout &lt;&lt; ++myInt &lt;&lt; endl;\n\tcout &lt;&lt; myInt &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;后置++ 先返回 再++\nvoid test02() &#123;\n\n\tMyInteger myInt;\n\tcout &lt;&lt; myInt++ &lt;&lt; endl;\n\tcout &lt;&lt; myInt &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\t&#x2F;&#x2F;test02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote>\n<h4 id=\"4-5-4-赋值运算符重载\"><a href=\"#4-5-4-赋值运算符重载\" class=\"headerlink\" title=\"4.5.4 赋值运算符重载\"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>\n<ol>\n<li>默认构造函数(无参，函数体为空)</li>\n<li>默认析构函数(无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator=, 对属性进行值拷贝</li>\n</ol>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\npublic:\n\n\tPerson(int age)\n\t&#123;\n\t\t&#x2F;&#x2F;将年龄数据开辟到堆区\n\t\tm_Age &#x3D; new int(age);\n\t&#125;\n\n\t&#x2F;&#x2F;重载赋值运算符 \n\tPerson&amp; operator&#x3D;(Person &amp;p)\n\t&#123;\n\t\tif (m_Age !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age &#x3D; NULL;\n\t\t&#125;\n\t\t&#x2F;&#x2F;编译器提供的代码是浅拷贝\n\t\t&#x2F;&#x2F;m_Age &#x3D; p.m_Age;\n\n\t\t&#x2F;&#x2F;提供深拷贝 解决浅拷贝的问题\n\t\tm_Age &#x3D; new int(*p.m_Age);\n\n\t\t&#x2F;&#x2F;返回自身\n\t\treturn *this;\n\t&#125;\n\n\n\t~Person()\n\t&#123;\n\t\tif (m_Age !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_Age;\n\t\t\tm_Age &#x3D; NULL;\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F;年龄的指针\n\tint *m_Age;\n\n&#125;;\n\n\nvoid test01()\n&#123;\n\tPerson p1(18);\n\n\tPerson p2(20);\n\n\tPerson p3(30);\n\n\tp3 &#x3D; p2 &#x3D; p1; &#x2F;&#x2F;赋值操作\n\n\tcout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\t&#x2F;&#x2F;int a &#x3D; 10;\n\t&#x2F;&#x2F;int b &#x3D; 20;\n\t&#x2F;&#x2F;int c &#x3D; 30;\n\n\t&#x2F;&#x2F;c &#x3D; b &#x3D; a;\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n\t&#x2F;&#x2F;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-5-5-关系运算符重载\"><a href=\"#4-5-5-关系运算符重载\" class=\"headerlink\" title=\"4.5.5 关系运算符重载\"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Person\n&#123;\npublic:\n\tPerson(string name, int age)\n\t&#123;\n\t\tthis-&gt;m_Name &#x3D; name;\n\t\tthis-&gt;m_Age &#x3D; age;\n\t&#125;;\n\n\tbool operator&#x3D;&#x3D;(Person &amp; p)\n\t&#123;\n\t\tif (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)\n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\treturn false;\n\t\t&#125;\n\t&#125;\n\n\tbool operator!&#x3D;(Person &amp; p)\n\t&#123;\n\t\tif (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)\n\t\t&#123;\n\t\t\treturn false;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\treturn true;\n\t\t&#125;\n\t&#125;\n\n\tstring m_Name;\n\tint m_Age;\n&#125;;\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;int a &#x3D; 0;\n\t&#x2F;&#x2F;int b &#x3D; 0;\n\n\tPerson a(&quot;孙悟空&quot;, 18);\n\tPerson b(&quot;孙悟空&quot;, 18);\n\n\tif (a &#x3D;&#x3D; b)\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125;\n\n\tif (a !&#x3D; b)\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;\n\t&#125;\n\telse\n\t&#123;\n\t\tcout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;\n\t&#125;\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"4-5-6-函数调用运算符重载\"><a href=\"#4-5-6-函数调用运算符重载\" class=\"headerlink\" title=\"4.5.6 函数调用运算符重载\"></a>4.5.6 函数调用运算符重载</h4><ul>\n<li>函数调用运算符 ()  也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>\n<li>仿函数没有固定写法，非常灵活</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class MyPrint\n&#123;\npublic:\n\tvoid operator()(string text)\n\t&#123;\n\t\tcout &lt;&lt; text &lt;&lt; endl;\n\t&#125;\n\n&#125;;\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;重载的（）操作符 也称为仿函数\n\tMyPrint myFunc;\n\tmyFunc(&quot;hello world&quot;);\n&#125;\n\n\nclass MyAdd\n&#123;\npublic:\n\tint operator()(int v1, int v2)\n\t&#123;\n\t\treturn v1 + v2;\n\t&#125;\n&#125;;\n\nvoid test02()\n&#123;\n\tMyAdd add;\n\tint ret &#x3D; add(10, 10);\n\tcout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; ret &lt;&lt; endl;\n\n\t&#x2F;&#x2F;匿名对象调用  \n\tcout &lt;&lt; &quot;MyAdd()(100,100) &#x3D; &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-6-继承\"><a href=\"#4-6-继承\" class=\"headerlink\" title=\"4.6  继承\"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>\n<p>有些类与类之间存在特殊的关系，例如下图中：</p>\n<p><img src=\"assets/1544861202252.png\" alt=\"1544861202252\"></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h4 id=\"4-6-1-继承的基本语法\"><a href=\"#4-6-1-继承的基本语法\" class=\"headerlink\" title=\"4.6.1 继承的基本语法\"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>\n<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>\n<p><strong>普通实现：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;Java页面\nclass Java \n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n&#x2F;&#x2F;Python页面\nclass Python\n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n&#x2F;&#x2F;C++页面\nclass CPP \n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t&#x2F;&#x2F;Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t&#x2F;&#x2F;C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>继承实现：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;公共页面\nclass BasePage\n&#123;\npublic:\n\tvoid header()\n\t&#123;\n\t\tcout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid footer()\n\t&#123;\n\t\tcout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;\n\t&#125;\n\tvoid left()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n\n&#x2F;&#x2F;Java页面\nclass Java : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n&#x2F;&#x2F;Python页面\nclass Python : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n&#x2F;&#x2F;C++页面\nclass CPP : public BasePage\n&#123;\npublic:\n\tvoid content()\n\t&#123;\n\t\tcout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;Java页面\n\tcout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;\n\tJava ja;\n\tja.header();\n\tja.footer();\n\tja.left();\n\tja.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t&#x2F;&#x2F;Python页面\n\tcout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;\n\tPython py;\n\tpy.header();\n\tpy.footer();\n\tpy.left();\n\tpy.content();\n\tcout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;\n\n\t&#x2F;&#x2F;C++页面\n\tcout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;\n\tCPP cp;\n\tcp.header();\n\tcp.footer();\n\tcp.left();\n\tcp.content();\n\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>总结：</strong></p>\n<p>继承的好处：==可以减少重复的代码==</p>\n<p>class A : public B; </p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h4 id=\"4-6-2-继承方式\"><a href=\"#4-6-2-继承方式\" class=\"headerlink\" title=\"4.6.2 继承方式\"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n<p><img src=\"assets/clip_image002.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base1\n&#123;\npublic: \n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\n\n&#x2F;&#x2F;公共继承\nclass Son1 :public Base1\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; &#x2F;&#x2F;可访问 public权限\n\t\tm_B; &#x2F;&#x2F;可访问 protected权限\n\t\t&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问\n\t&#125;\n&#125;;\n\nvoid myClass()\n&#123;\n\tSon1 s1;\n\ts1.m_A; &#x2F;&#x2F;其他类只能访问到公共权限\n&#125;\n\n&#x2F;&#x2F;保护继承\nclass Base2\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\nclass Son2:protected Base2\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; &#x2F;&#x2F;可访问 protected权限\n\t\tm_B; &#x2F;&#x2F;可访问 protected权限\n\t\t&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问\n\t&#125;\n&#125;;\nvoid myClass2()\n&#123;\n\tSon2 s;\n\t&#x2F;&#x2F;s.m_A; &#x2F;&#x2F;不可访问\n&#125;\n\n&#x2F;&#x2F;私有继承\nclass Base3\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C;\n&#125;;\nclass Son3:private Base3\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\tm_A; &#x2F;&#x2F;可访问 private权限\n\t\tm_B; &#x2F;&#x2F;可访问 private权限\n\t\t&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问\n\t&#125;\n&#125;;\nclass GrandSon3 :public Son3\n&#123;\npublic:\n\tvoid func()\n\t&#123;\n\t\t&#x2F;&#x2F;Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到\n\t\t&#x2F;&#x2F;m_A;\n\t\t&#x2F;&#x2F;m_B;\n\t\t&#x2F;&#x2F;m_C;\n\t&#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-6-3-继承中的对象模型\"><a href=\"#4-6-3-继承中的对象模型\" class=\"headerlink\" title=\"4.6.3 继承中的对象模型\"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base\n&#123;\npublic:\n\tint m_A;\nprotected:\n\tint m_B;\nprivate:\n\tint m_C; &#x2F;&#x2F;私有成员只是被隐藏了，但是还是会继承下去\n&#125;;\n\n&#x2F;&#x2F;公共继承\nclass Son :public Base\n&#123;\npublic:\n\tint m_D;\n&#125;;\n\nvoid test01()\n&#123;\n\tcout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>利用工具查看：</p>\n<p><img src=\"assets/1545881904150.png\" alt=\"1545881904150\"></p>\n<p>打开工具窗口后，定位到当前CPP文件的盘符</p>\n<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>\n<p>效果如下图：</p>\n<p><img src=\"assets/1545882158050.png\" alt=\"1545882158050\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote>\n<h4 id=\"4-6-4-继承中构造和析构顺序\"><a href=\"#4-6-4-继承中构造和析构顺序\" class=\"headerlink\" title=\"4.6.4 继承中构造和析构顺序\"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base \n&#123;\npublic:\n\tBase()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Base()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Son : public Base\n&#123;\npublic:\n\tSon()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Son()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反\n\tSon s;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote>\n<h4 id=\"4-6-5-继承同名成员处理方式\"><a href=\"#4-6-5-继承同名成员处理方式\" class=\"headerlink\" title=\"4.6.5 继承同名成员处理方式\"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base &#123;\npublic:\n\tBase()\n\t&#123;\n\t\tm_A &#x3D; 100;\n\t&#125;\n\n\tvoid func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;\n\t&#125;\n\n\tvoid func(int a)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;\n\t&#125;\n\npublic:\n\tint m_A;\n&#125;;\n\n\nclass Son : public Base &#123;\npublic:\n\tSon()\n\t&#123;\n\t\tm_A &#x3D; 200;\n\t&#125;\n\n\t&#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数\n\t&#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域\n\tvoid func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\nvoid test01()\n&#123;\n\tSon s;\n\n\tcout &lt;&lt; &quot;Son下的m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base下的m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;\n\n\ts.func();\n\ts.Base::func();\n\ts.Base::func(10);\n\n&#125;\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\treturn EXIT_SUCCESS;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<ol>\n<li>子类对象可以直接访问到子类中同名成员</li>\n<li>子类对象加作用域可以访问到父类同名成员</li>\n<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>\n</ol>\n<h4 id=\"4-6-6-继承同名静态成员处理方式\"><a href=\"#4-6-6-继承同名静态成员处理方式\" class=\"headerlink\" title=\"4.6.6 继承同名静态成员处理方式\"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base &#123;\npublic:\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic void func(int a)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;\n\t&#125;\n\n\tstatic int m_A;\n&#125;;\n\nint Base::m_A &#x3D; 100;\n\nclass Son : public Base &#123;\npublic:\n\tstatic void func()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;\n\t&#125;\n\tstatic int m_A;\n&#125;;\n\nint Son::m_A &#x3D; 200;\n\n&#x2F;&#x2F;同名成员属性\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;通过对象访问\n\tcout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n\tSon s;\n\tcout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;\n\n\t&#x2F;&#x2F;通过类名访问\n\tcout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; Son::m_A &lt;&lt; endl;\n\tcout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;同名成员函数\nvoid test02()\n&#123;\n\t&#x2F;&#x2F;通过对象访问\n\tcout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;\n\tSon s;\n\ts.func();\n\ts.Base::func();\n\n\tcout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;\n\tSon::func();\n\tSon::Base::func();\n\t&#x2F;&#x2F;出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问\n\tSon::Base::func(100);\n&#125;\nint main() &#123;\n\n\t&#x2F;&#x2F;test01();\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote>\n<h4 id=\"4-6-7-多继承语法\"><a href=\"#4-6-7-多继承语法\" class=\"headerlink\" title=\"4.6.7 多继承语法\"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>\n<p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++实际开发中不建议用多继承</strong></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base1 &#123;\npublic:\n\tBase1()\n\t&#123;\n\t\tm_A &#x3D; 100;\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\nclass Base2 &#123;\npublic:\n\tBase2()\n\t&#123;\n\t\tm_A &#x3D; 200;  &#x2F;&#x2F;开始是m_B 不会出问题，但是改为mA就会出现不明确\n\t&#125;\npublic:\n\tint m_A;\n&#125;;\n\n&#x2F;&#x2F;语法：class 子类：继承方式 父类1 ，继承方式 父类2 \nclass Son : public Base2, public Base1 \n&#123;\npublic:\n\tSon()\n\t&#123;\n\t\tm_C &#x3D; 300;\n\t\tm_D &#x3D; 400;\n\t&#125;\npublic:\n\tint m_C;\n\tint m_D;\n&#125;;\n\n\n&#x2F;&#x2F;多继承容易产生成员同名的情况\n&#x2F;&#x2F;通过使用类名作用域可以区分调用哪一个基类的成员\nvoid test01()\n&#123;\n\tSon s;\n\tcout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;\n\tcout &lt;&lt; s.Base1::m_A &lt;&lt; endl;\n\tcout &lt;&lt; s.Base2::m_A &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote>\n<h4 id=\"4-6-8-菱形继承\"><a href=\"#4-6-8-菱形继承\" class=\"headerlink\" title=\"4.6.8 菱形继承\"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>\n<p>​    两个派生类继承同一个基类</p>\n<p>​    又有某个类同时继承者两个派生类</p>\n<p>​    这种继承被称为菱形继承，或者钻石继承</p>\n<p><strong>典型的菱形继承案例：</strong></p>\n<p><img src=\"assets/clip_image002.jpg\" alt=\"IMG_256\"></p>\n<p><strong>菱形继承问题：</strong></p>\n<ol>\n<li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。\n</code></pre>\n</li>\n<li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。\n</code></pre>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Animal\n&#123;\npublic:\n\tint m_Age;\n&#125;;\n\n&#x2F;&#x2F;继承前加virtual关键字后，变为虚继承\n&#x2F;&#x2F;此时公共的父类Animal称为虚基类\nclass Sheep : virtual public Animal &#123;&#125;;\nclass Tuo   : virtual public Animal &#123;&#125;;\nclass SheepTuo : public Sheep, public Tuo &#123;&#125;;\n\nvoid test01()\n&#123;\n\tSheepTuo st;\n\tst.Sheep::m_Age &#x3D; 100;\n\tst.Tuo::m_Age &#x3D; 200;\n\n\tcout &lt;&lt; &quot;st.Sheep::m_Age &#x3D; &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.Tuo::m_Age &#x3D; &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;\n\tcout &lt;&lt; &quot;st.m_Age &#x3D; &quot; &lt;&lt; st.m_Age &lt;&lt; endl;\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>总结：</p>\n<ul>\n<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>\n<li>利用虚继承可以解决菱形继承问题</li>\n</ul>\n<h3 id=\"4-7-多态\"><a href=\"#4-7-多态\" class=\"headerlink\" title=\"4.7  多态\"></a>4.7  多态</h3><h4 id=\"4-7-1-多态的基本概念\"><a href=\"#4-7-1-多态的基本概念\" class=\"headerlink\" title=\"4.7.1 多态的基本概念\"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul>\n<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>\n<li>动态多态: 派生类和虚函数实现运行时多态</li>\n</ul>\n<p>静态多态和动态多态区别：</p>\n<ul>\n<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>\n</ul>\n<p>下面通过案例进行讲解多态</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Animal\n&#123;\npublic:\n\t&#x2F;&#x2F;Speak函数就是虚函数\n\t&#x2F;&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。\n\tvirtual void speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Cat :public Animal\n&#123;\npublic:\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass Dog :public Animal\n&#123;\npublic:\n\n\tvoid speak()\n\t&#123;\n\t\tcout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;\n\t&#125;\n\n&#125;;\n&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数\n&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编\n&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编\n\nvoid DoSpeak(Animal &amp; animal)\n&#123;\n\tanimal.speak();\n&#125;\n&#x2F;&#x2F;\n&#x2F;&#x2F;多态满足条件： \n&#x2F;&#x2F;1、有继承关系\n&#x2F;&#x2F;2、子类重写父类中的虚函数\n&#x2F;&#x2F;多态使用：\n&#x2F;&#x2F;父类指针或引用指向子类对象\n\nvoid test01()\n&#123;\n\tCat cat;\n\tDoSpeak(cat);\n\n\n\tDog dog;\n\tDoSpeak(dog);\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系</li>\n<li>子类重写父类中的虚函数</li>\n</ul>\n<p>多态使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>\n<h4 id=\"4-7-2-多态案例一-计算器类\"><a href=\"#4-7-2-多态案例一-计算器类\" class=\"headerlink\" title=\"4.7.2 多态案例一-计算器类\"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>\n<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;普通实现\nclass Calculator &#123;\npublic:\n\tint getResult(string oper)\n\t&#123;\n\t\tif (oper &#x3D;&#x3D; &quot;+&quot;) &#123;\n\t\t\treturn m_Num1 + m_Num2;\n\t\t&#125;\n\t\telse if (oper &#x3D;&#x3D; &quot;-&quot;) &#123;\n\t\t\treturn m_Num1 - m_Num2;\n\t\t&#125;\n\t\telse if (oper &#x3D;&#x3D; &quot;*&quot;) &#123;\n\t\t\treturn m_Num1 * m_Num2;\n\t\t&#125;\n\t\t&#x2F;&#x2F;如果要提供新的运算，需要修改源码\n\t&#125;\npublic:\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;普通实现测试\n\tCalculator c;\n\tc.m_Num1 &#x3D; 10;\n\tc.m_Num2 &#x3D; 10;\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;\n\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;\n\n\tcout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;\n&#125;\n\n\n\n&#x2F;&#x2F;多态实现\n&#x2F;&#x2F;抽象计算器类\n&#x2F;&#x2F;多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护\nclass AbstractCalculator\n&#123;\npublic :\n\n\tvirtual int getResult()\n\t&#123;\n\t\treturn 0;\n\t&#125;\n\n\tint m_Num1;\n\tint m_Num2;\n&#125;;\n\n&#x2F;&#x2F;加法计算器\nclass AddCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 + m_Num2;\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;减法计算器\nclass SubCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 - m_Num2;\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;乘法计算器\nclass MulCalculator :public AbstractCalculator\n&#123;\npublic:\n\tint getResult()\n\t&#123;\n\t\treturn m_Num1 * m_Num2;\n\t&#125;\n&#125;;\n\n\nvoid test02()\n&#123;\n\t&#x2F;&#x2F;创建加法计算器\n\tAbstractCalculator *abc &#x3D; new AddCalculator;\n\tabc-&gt;m_Num1 &#x3D; 10;\n\tabc-&gt;m_Num2 &#x3D; 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  &#x2F;&#x2F;用完了记得销毁\n\n\t&#x2F;&#x2F;创建减法计算器\n\tabc &#x3D; new SubCalculator;\n\tabc-&gt;m_Num1 &#x3D; 10;\n\tabc-&gt;m_Num2 &#x3D; 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;  \n\n\t&#x2F;&#x2F;创建乘法计算器\n\tabc &#x3D; new MulCalculator;\n\tabc-&gt;m_Num1 &#x3D; 10;\n\tabc-&gt;m_Num2 &#x3D; 10;\n\tcout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;\n\tdelete abc;\n&#125;\n\nint main() &#123;\n\n\t&#x2F;&#x2F;test01();\n\n\ttest02();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote>\n<h4 id=\"4-7-3-纯虚函数和抽象类\"><a href=\"#4-7-3-纯虚函数和抽象类\" class=\"headerlink\" title=\"4.7.3 纯虚函数和抽象类\"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base\n&#123;\npublic:\n\t&#x2F;&#x2F;纯虚函数\n\t&#x2F;&#x2F;类中只要有一个纯虚函数就称为抽象类\n\t&#x2F;&#x2F;抽象类无法实例化对象\n\t&#x2F;&#x2F;子类必须重写父类中的纯虚函数，否则也属于抽象类\n\tvirtual void func() &#x3D; 0;\n&#125;;\n\nclass Son :public Base\n&#123;\npublic:\n\tvirtual void func() \n\t&#123;\n\t\tcout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;\n\t&#125;;\n&#125;;\n\nvoid test01()\n&#123;\n\tBase * base &#x3D; NULL;\n\t&#x2F;&#x2F;base &#x3D; new Base; &#x2F;&#x2F; 错误，抽象类无法实例化对象\n\tbase &#x3D; new Son;\n\tbase-&gt;func();\n\tdelete base;&#x2F;&#x2F;记得销毁\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-4-多态案例二-制作饮品\"><a href=\"#4-7-4-多态案例二-制作饮品\" class=\"headerlink\" title=\"4.7.4 多态案例二-制作饮品\"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>\n<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>\n<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>\n<p><img src=\"assets/1545985945198.png\" alt=\"1545985945198\"></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">&#x2F;&#x2F;抽象制作饮品\nclass AbstractDrinking &#123;\npublic:\n\t&#x2F;&#x2F;烧水\n\tvirtual void Boil() &#x3D; 0;\n\t&#x2F;&#x2F;冲泡\n\tvirtual void Brew() &#x3D; 0;\n\t&#x2F;&#x2F;倒入杯中\n\tvirtual void PourInCup() &#x3D; 0;\n\t&#x2F;&#x2F;加入辅料\n\tvirtual void PutSomething() &#x3D; 0;\n\t&#x2F;&#x2F;规定流程\n\tvoid MakeDrink() &#123;\n\t\tBoil();\n\t\tBrew();\n\t\tPourInCup();\n\t\tPutSomething();\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;制作咖啡\nclass Coffee : public AbstractDrinking &#123;\npublic:\n\t&#x2F;&#x2F;烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;制作茶水\nclass Tea : public AbstractDrinking &#123;\npublic:\n\t&#x2F;&#x2F;烧水\n\tvirtual void Boil() &#123;\n\t\tcout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;冲泡\n\tvirtual void Brew() &#123;\n\t\tcout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;倒入杯中\n\tvirtual void PourInCup() &#123;\n\t\tcout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;\n\t&#125;\n\t&#x2F;&#x2F;加入辅料\n\tvirtual void PutSomething() &#123;\n\t\tcout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;业务函数\nvoid DoWork(AbstractDrinking* drink) &#123;\n\tdrink-&gt;MakeDrink();\n\tdelete drink;\n&#125;\n\nvoid test01() &#123;\n\tDoWork(new Coffee);\n\tcout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;\n\tDoWork(new Tea);\n&#125;\n\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-5-虚析构和纯虚析构\"><a href=\"#4-7-5-虚析构和纯虚析构\" class=\"headerlink\" title=\"4.7.5 虚析构和纯虚析构\"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名()&#123;&#125;</code></p>\n<p>纯虚析构语法：</p>\n<p><code> virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名()&#123;&#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Animal &#123;\npublic:\n\n\tAnimal()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;\n\t&#125;\n\tvirtual void Speak() &#x3D; 0;\n\n\t&#x2F;&#x2F;析构函数加上virtual关键字，变成虚析构函数\n\t&#x2F;&#x2F;virtual ~Animal()\n\t&#x2F;&#x2F;&#123;\n\t&#x2F;&#x2F;\tcout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F;&#125;\n\n\n\tvirtual ~Animal() &#x3D; 0;\n&#125;;\n\nAnimal::~Animal()\n&#123;\n\tcout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;\n&#125;\n\n&#x2F;&#x2F;和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。\n\nclass Cat : public Animal &#123;\npublic:\n\tCat(string name)\n\t&#123;\n\t\tcout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;\n\t\tm_Name &#x3D; new string(name);\n\t&#125;\n\tvirtual void Speak()\n\t&#123;\n\t\tcout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;\n\t&#125;\n\t~Cat()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;\n\t\tif (this-&gt;m_Name !&#x3D; NULL) &#123;\n\t\t\tdelete m_Name;\n\t\t\tm_Name &#x3D; NULL;\n\t\t&#125;\n\t&#125;\n\npublic:\n\tstring *m_Name;\n&#125;;\n\nvoid test01()\n&#123;\n\tAnimal *animal &#x3D; new Cat(&quot;Tom&quot;);\n\tanimal-&gt;Speak();\n\n\t&#x2F;&#x2F;通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏\n\t&#x2F;&#x2F;怎么解决？给基类增加一个虚析构函数\n\t&#x2F;&#x2F;虚析构函数就是用来解决通过父类指针释放子类对象\n\tdelete animal;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>总结：</p>\n<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>\n<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>\n<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>\n<h4 id=\"4-7-6-多态案例三-电脑组装\"><a href=\"#4-7-6-多态案例三-电脑组装\" class=\"headerlink\" title=\"4.7.6 多态案例三-电脑组装\"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>\n<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>\n<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>\n<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>\n<p>测试时组装三台不同的电脑进行工作</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include&lt;iostream&gt;\nusing namespace std;\n\n&#x2F;&#x2F;抽象CPU类\nclass CPU\n&#123;\npublic:\n\t&#x2F;&#x2F;抽象的计算函数\n\tvirtual void calculate() &#x3D; 0;\n&#125;;\n\n&#x2F;&#x2F;抽象显卡类\nclass VideoCard\n&#123;\npublic:\n\t&#x2F;&#x2F;抽象的显示函数\n\tvirtual void display() &#x3D; 0;\n&#125;;\n\n&#x2F;&#x2F;抽象内存条类\nclass Memory\n&#123;\npublic:\n\t&#x2F;&#x2F;抽象的存储函数\n\tvirtual void storage() &#x3D; 0;\n&#125;;\n\n&#x2F;&#x2F;电脑类\nclass Computer\n&#123;\npublic:\n\tComputer(CPU * cpu, VideoCard * vc, Memory * mem)\n\t&#123;\n\t\tm_cpu &#x3D; cpu;\n\t\tm_vc &#x3D; vc;\n\t\tm_mem &#x3D; mem;\n\t&#125;\n\n\t&#x2F;&#x2F;提供工作的函数\n\tvoid work()\n\t&#123;\n\t\t&#x2F;&#x2F;让零件工作起来，调用接口\n\t\tm_cpu-&gt;calculate();\n\n\t\tm_vc-&gt;display();\n\n\t\tm_mem-&gt;storage();\n\t&#125;\n\n\t&#x2F;&#x2F;提供析构函数 释放3个电脑零件\n\t~Computer()\n\t&#123;\n\n\t\t&#x2F;&#x2F;释放CPU零件\n\t\tif (m_cpu !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_cpu;\n\t\t\tm_cpu &#x3D; NULL;\n\t\t&#125;\n\n\t\t&#x2F;&#x2F;释放显卡零件\n\t\tif (m_vc !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_vc;\n\t\t\tm_vc &#x3D; NULL;\n\t\t&#125;\n\n\t\t&#x2F;&#x2F;释放内存条零件\n\t\tif (m_mem !&#x3D; NULL)\n\t\t&#123;\n\t\t\tdelete m_mem;\n\t\t\tm_mem &#x3D; NULL;\n\t\t&#125;\n\t&#125;\n\nprivate:\n\n\tCPU * m_cpu; &#x2F;&#x2F;CPU的零件指针\n\tVideoCard * m_vc; &#x2F;&#x2F;显卡零件指针\n\tMemory * m_mem; &#x2F;&#x2F;内存条零件指针\n&#125;;\n\n&#x2F;&#x2F;具体厂商\n&#x2F;&#x2F;Intel厂商\nclass IntelCPU :public CPU\n&#123;\npublic:\n\tvirtual void calculate()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass IntelVideoCard :public VideoCard\n&#123;\npublic:\n\tvirtual void display()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass IntelMemory :public Memory\n&#123;\npublic:\n\tvirtual void storage()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n&#x2F;&#x2F;Lenovo厂商\nclass LenovoCPU :public CPU\n&#123;\npublic:\n\tvirtual void calculate()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass LenovoVideoCard :public VideoCard\n&#123;\npublic:\n\tvirtual void display()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\nclass LenovoMemory :public Memory\n&#123;\npublic:\n\tvirtual void storage()\n\t&#123;\n\t\tcout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;\n\t&#125;\n&#125;;\n\n\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;第一台电脑零件\n\tCPU * intelCpu &#x3D; new IntelCPU;\n\tVideoCard * intelCard &#x3D; new IntelVideoCard;\n\tMemory * intelMem &#x3D; new IntelMemory;\n\n\tcout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F;创建第一台电脑\n\tComputer * computer1 &#x3D; new Computer(intelCpu, intelCard, intelMem);\n\tcomputer1-&gt;work();\n\tdelete computer1;\n\n\tcout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F;第二台电脑组装\n\tComputer * computer2 &#x3D; new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;\n\tcomputer2-&gt;work();\n\tdelete computer2;\n\n\tcout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;\n\t&#x2F;&#x2F;第三台电脑组装\n\tComputer * computer3 &#x3D; new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;\n\tcomputer3-&gt;work();\n\tdelete computer3;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-文件操作\"><a href=\"#5-文件操作\" class=\"headerlink\" title=\"5 文件操作\"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>\n<p>文件类型分为两种：</p>\n<ol>\n<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>\n<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作</li>\n<li>ifstream： 读操作</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h3 id=\"5-1文本文件\"><a href=\"#5-1文本文件\" class=\"headerlink\" title=\"5.1文本文件\"></a>5.1文本文件</h3><h4 id=\"5-1-1写文件\"><a href=\"#5-1-1写文件\" class=\"headerlink\" title=\"5.1.1写文件\"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ofstream ofs;</p>\n</li>\n<li><p>打开文件</p>\n<p>ofs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>写数据</p>\n<p>ofs &lt;&lt; “写入的数据”;</p>\n</li>\n<li><p>关闭文件</p>\n<p>ofs.close();</p>\n</li>\n</ol>\n<p>文件打开方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>\n<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;fstream&gt;\n\nvoid test01()\n&#123;\n\tofstream ofs;\n\tofs.open(&quot;test.txt&quot;, ios::out);\n\n\tofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;\n\tofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;\n\tofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;\n\n\tofs.close();\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream  ，或者fstream类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用&lt;&lt;可以向文件中写数据</li>\n<li>操作完毕，要关闭文件</li>\n</ul>\n<h4 id=\"5-1-2读文件\"><a href=\"#5-1-2读文件\" class=\"headerlink\" title=\"5.1.2读文件\"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>#include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ifstream ifs;</p>\n</li>\n<li><p>打开文件并判断文件是否打开成功</p>\n<p>ifs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>读数据</p>\n<p>四种方式读取</p>\n</li>\n<li><p>关闭文件</p>\n<p>ifs.close();</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\nvoid test01()\n&#123;\n\tifstream ifs;\n\tifs.open(&quot;test.txt&quot;, ios::in);\n\n\tif (!ifs.is_open())\n\t&#123;\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n\t\treturn;\n\t&#125;\n\n\t&#x2F;&#x2F;第一种方式\n\t&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;\n\t&#x2F;&#x2F;while (ifs &gt;&gt; buf)\n\t&#x2F;&#x2F;&#123;\n\t&#x2F;&#x2F;\tcout &lt;&lt; buf &lt;&lt; endl;\n\t&#x2F;&#x2F;&#125;\n\n\t&#x2F;&#x2F;第二种\n\t&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;\n\t&#x2F;&#x2F;while (ifs.getline(buf,sizeof(buf)))\n\t&#x2F;&#x2F;&#123;\n\t&#x2F;&#x2F;\tcout &lt;&lt; buf &lt;&lt; endl;\n\t&#x2F;&#x2F;&#125;\n\n\t&#x2F;&#x2F;第三种\n\t&#x2F;&#x2F;string buf;\n\t&#x2F;&#x2F;while (getline(ifs, buf))\n\t&#x2F;&#x2F;&#123;\n\t&#x2F;&#x2F;\tcout &lt;&lt; buf &lt;&lt; endl;\n\t&#x2F;&#x2F;&#125;\n\n\tchar c;\n\twhile ((c &#x3D; ifs.get()) !&#x3D; EOF)\n\t&#123;\n\t\tcout &lt;&lt; c;\n\t&#125;\n\n\tifs.close();\n\n\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<ul>\n<li>读文件可以利用 ifstream  ，或者fstream类</li>\n<li>利用is_open函数可以判断文件是否打开成功</li>\n<li>close 关闭文件 </li>\n</ul>\n<h3 id=\"5-2-二进制文件\"><a href=\"#5-2-二进制文件\" class=\"headerlink\" title=\"5.2 二进制文件\"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 ==ios::binary==</p>\n<h4 id=\"5-2-1-写文件\"><a href=\"#5-2-1-写文件\" class=\"headerlink\" title=\"5.2.1 写文件\"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>\n<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nclass Person\n&#123;\npublic:\n\tchar m_Name[64];\n\tint m_Age;\n&#125;;\n\n&#x2F;&#x2F;二进制文件  写文件\nvoid test01()\n&#123;\n\t&#x2F;&#x2F;1、包含头文件\n\n\t&#x2F;&#x2F;2、创建输出流对象\n\tofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);\n\t\n\t&#x2F;&#x2F;3、打开文件\n\t&#x2F;&#x2F;ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);\n\n\tPerson p &#x3D; &#123;&quot;张三&quot;  , 18&#125;;\n\n\t&#x2F;&#x2F;4、写文件\n\tofs.write((const char *)&amp;p, sizeof(p));\n\n\t&#x2F;&#x2F;5、关闭文件\n\tofs.close();\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总结：</p>\n<ul>\n<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>\n</ul>\n<h4 id=\"5-2-2-读文件\"><a href=\"#5-2-2-读文件\" class=\"headerlink\" title=\"5.2.2 读文件\"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>\n<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p>示例：</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nclass Person\n&#123;\npublic:\n\tchar m_Name[64];\n\tint m_Age;\n&#125;;\n\nvoid test01()\n&#123;\n\tifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);\n\tif (!ifs.is_open())\n\t&#123;\n\t\tcout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;\n\t&#125;\n\n\tPerson p;\n\tifs.read((char *)&amp;p, sizeof(p));\n\n\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;\n&#125;\n\nint main() &#123;\n\n\ttest01();\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>\n</ul>\n","text":"C++核心编程PS:转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。 1 内存分区模型C+...","link":"","photos":[],"count_time":{"symbolsCount":"64k","symbolsTime":"58 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"记录","slug":"记录","count":3,"path":"api/tags/记录.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">C++核心编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PS-%E8%BD%AC%E8%BD%BD%E4%BA%8E%E2%80%9C%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E2%80%9D%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%E4%BB%85%E5%9B%A0%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%8E%9F%E5%9B%A0%EF%BC%8C%E6%83%B3%E9%9A%8F%E6%97%B6%E6%9F%A5%E7%9C%8B%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E8%80%8C%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%9A%84%E3%80%82\"><span class=\"toc-text\">PS:转载于“黑马程序员”！！！！！！仅因为个人原因，想随时查看相关资料而上传到个人博客的的。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%F0%9F%98%82%F0%9F%A4%A3%F0%9F%A5%93%F0%9F%A5%A9%F0%9F%8D%94%F0%9F%91%BC%F0%9F%91%B2%E5%90%A7%F0%9F%A4%B4%F0%9F%8C%AE%F0%9F%8D%97%F0%9F%8D%A9%F0%9F%A5%A3%F0%9F%8D%A8%F0%9F%8D%99%F0%9F%8D%AE%F0%9F%A7%8A%F0%9F%8D%BB%F0%9F%A5%82%F0%9F%8D%BD%F0%9F%8D%B8%F0%9F%A5%A2%F0%9F%8F%BA%F0%9F%8D%87%F0%9F%91%A8%E2%80%8D%F0%9F%A6%B1%F0%9F%91%A8%E2%80%8D%F0%9F%A6%B3%F0%9F%95%B5%EF%B8%8F%E2%80%8D%E2%99%80%EF%B8%8F%F0%9F%8C%AE%F0%9F%A7%80%F0%9F%A7%88%F0%9F%8C%AE%F0%9F%8D%99%F0%9F%8D%A5%F0%9F%A5%A7\"><span class=\"toc-text\">😂🤣🥓🥩🍔👼👲吧🤴🌮🍗🍩🥣🍨🍙🍮🧊🍻🥂🍽🍸🥢🏺🍇👨‍🦱👨‍🦳🕵️‍♀️🌮🧀🧈🌮🍙🍥🥧</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1 内存分区模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%89%8D\"><span class=\"toc-text\">1.1 程序运行前</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%90%8E\"><span class=\"toc-text\">1.2 程序运行后</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-new%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1.3 new操作符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2 引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%BC%95%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.1 引用的基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%BC%95%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.2 引用注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%BC%95%E7%94%A8%E5%81%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.3 引用做函数参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%BC%95%E7%94%A8%E5%81%9A%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">2.4 引用做函数返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">2.5 引用的本质</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E5%B8%B8%E9%87%8F%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2.6 常量引用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%87%BD%E6%95%B0%E6%8F%90%E9%AB%98\"><span class=\"toc-text\">3 函数提高</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.1 函数默认参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%87%BD%E6%95%B0%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.2 函数占位参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">3.3 函数重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">3.3.1 函数重载概述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">3.3.2 函数重载注意事项</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4 类和对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">4.1 封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-1-%E5%B0%81%E8%A3%85%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">4.1.1  封装的意义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-2-struct%E5%92%8Cclass%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.1.2 struct和class区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-3-%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%A7%81%E6%9C%89\"><span class=\"toc-text\">4.1.3 成员属性设置为私有</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86\"><span class=\"toc-text\">4.2 对象的初始化和清理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.2.1 构造函数和析构函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4.2.2 构造函数的分类及调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">4.2.3 拷贝构造函数调用时机</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-4-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4.2.4 构造函数调用规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-5-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">4.2.5 深拷贝与浅拷贝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-6-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">4.2.6 初始化列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-7-%E7%B1%BB%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E7%B1%BB%E6%88%90%E5%91%98\"><span class=\"toc-text\">4.2.7 类对象作为类成员</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-8-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">4.2.8 静态成员</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E9%92%88\"><span class=\"toc-text\">4.3 C++对象模型和this指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-1-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">4.3.1 成员变量和成员函数分开存储</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-2-this%E6%8C%87%E9%92%88%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.3.2 this指针概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-3-%E7%A9%BA%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.3 空指针访问成员函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-4-const%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.3.4 const修饰成员函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4 友元</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-1-%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.1 全局函数做友元</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-2-%E7%B1%BB%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.2 类做友元</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-3-%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%81%9A%E5%8F%8B%E5%85%83\"><span class=\"toc-text\">4.4.3 成员函数做友元</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5 运算符重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-1-%E5%8A%A0%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.1 加号运算符重载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-2-%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.2 左移运算符重载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-3-%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.3 递增运算符重载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-4-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.4 赋值运算符重载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-5-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.5 关系运算符重载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-5-6-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">4.5.6 函数调用运算符重载</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">4.6  继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-1-%E7%BB%A7%E6%89%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4.6.1 继承的基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-2-%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.2 继承方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-3-%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">4.6.3 继承中的对象模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-4-%E7%BB%A7%E6%89%BF%E4%B8%AD%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">4.6.4 继承中构造和析构顺序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-5-%E7%BB%A7%E6%89%BF%E5%90%8C%E5%90%8D%E6%88%90%E5%91%98%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.5 继承同名成员处理方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-6-%E7%BB%A7%E6%89%BF%E5%90%8C%E5%90%8D%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.6.6 继承同名静态成员处理方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-7-%E5%A4%9A%E7%BB%A7%E6%89%BF%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">4.6.7 多继承语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-6-8-%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">4.6.8 菱形继承</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">4.7  多态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-1-%E5%A4%9A%E6%80%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.7.1 多态的基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-2-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B%E4%B8%80-%E8%AE%A1%E7%AE%97%E5%99%A8%E7%B1%BB\"><span class=\"toc-text\">4.7.2 多态案例一-计算器类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-3-%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">4.7.3 纯虚函数和抽象类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-4-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B%E4%BA%8C-%E5%88%B6%E4%BD%9C%E9%A5%AE%E5%93%81\"><span class=\"toc-text\">4.7.4 多态案例二-制作饮品</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-5-%E8%99%9A%E6%9E%90%E6%9E%84%E5%92%8C%E7%BA%AF%E8%99%9A%E6%9E%90%E6%9E%84\"><span class=\"toc-text\">4.7.5 虚析构和纯虚析构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-7-6-%E5%A4%9A%E6%80%81%E6%A1%88%E4%BE%8B%E4%B8%89-%E7%94%B5%E8%84%91%E7%BB%84%E8%A3%85\"><span class=\"toc-text\">4.7.6 多态案例三-电脑组装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5 文件操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1文本文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-1%E5%86%99%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1.1写文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-2%E8%AF%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.1.2读文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2 二进制文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E5%86%99%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2.1 写文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E8%AF%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.2.2 读文件</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C_answer","uid":"5ff3ed1096e2d71cb98e6d4ddf0126cd","slug":"C-answer","date":"2021-12-17T04:47:05.000Z","updated":"2021-12-17T12:49:30.432Z","comments":true,"path":"api/articles/C-answer.json","keywords":null,"cover":[],"text":"1001这道题主要的问题是需要考虑到输入错误的时候，不能继续输出，而是直接退出。 考察了scanf的返回值，以及while的判断规则，以及按位取反的操作 scanf的返回值——-它返回已成功赋值的数据项数；出错时则返回EOF； ​ （注：EOF(End Of File)是一个预定...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"十一届蓝桥杯嵌入式省赛","uid":"e9d1803706b9032e2ca68eddf6b43194","slug":"十一届蓝桥杯嵌入式省赛","date":"2021-12-04T07:49:03.000Z","updated":"2022-04-09T09:25:48.616Z","comments":true,"path":"api/articles/十一届蓝桥杯嵌入式省赛.json","keywords":null,"cover":"https://z3.ax1x.com/2021/11/22/IzTdmR.jpg","text":"前言由于本人乃菜鸡，而且这个项目只是我拿来给自己练习的，所以并没有想过做教学使用，大家可以参考一下，如果各位大佬垂阅，可以给出一下建议，我将不甚感激。 之前些32代码都是全部放到main.c里面，这次是第一次把主要的程序都放到其他.c中，然后调用，这样逻辑是会比较清晰的，而且以后...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"比赛项目","slug":"比赛项目","count":3,"path":"api/categories/比赛项目.json"}],"tags":[{"name":"stm32","slug":"stm32","count":2,"path":"api/tags/stm32.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}