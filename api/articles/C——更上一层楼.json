{"title":"C——更上一层楼","uid":"c42a0b3141aaa138d0f4817da34142c5","slug":"C——更上一层楼","date":"2022-01-19T16:22:54.000Z","updated":"2022-03-08T04:06:06.267Z","comments":true,"path":"api/articles/C——更上一层楼.json","keywords":null,"cover":[],"content":"<p> 前言：写这么一篇blog的原因有：</p>\n<p>​                重走一边c路，巩固基础知识，基础不牢，地动山摇</p>\n<p>​                学会底层思维    //编译运行 资源分配回收 效率</p>\n<p>​                重点 难点 突破 //指针 内存</p>\n<pre><code>             面向面试\n</code></pre>\n<p>环境搭建</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>安装好vsc后，创建main.c后输入#include &lt;stdio.h&gt;后报错显示“检测到 #include 错误。请更新 includePath”</p>\n<p><a href=\"https://blog.csdn.net/qq_40207976/article/details/113337366?ops_request_misc=%7B%22request_id%22:%22164276855916780366568942%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164276855916780366568942&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-113337366.first_rank_v2_pc_rank_v29&utm_term=%E6%A3%80%E6%B5%8B%E5%88%B0+%23include+%E9%94%99%E8%AF%AF%E3%80%82%E8%AF%B7%E6%9B%B4%E6%96%B0+includePath%E3%80%82&spm=1018.2226.3001.4187\">vscode检测到#include错误请更新includePath的解决方法</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43374723/article/details/84064644\">Ubuntu16.04下配置VScode的C/C++开发环境_WavenZ的博客-CSDN博客_ubuntu vscode配置c++环境</a></p>\n<p><a href=\"https://blog.csdn.net/CCCStudy4923/article/details/111145799\"> Ubantu下使用VSCode编译运行C语言程序</a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">创建代码文件  <span class=\"token comment\">//文件 -> 打开文件夹（如C) </span>\n\t     <span class=\"token comment\">// 点 +号图标（新建文件）-> 输入文件名（如main.c)   </span>\n\t     <span class=\"token comment\">//注：vscode能自动识别.c文件，提示你安装C插件，安装即可</span>\n\n运行和调试 <span class=\"token comment\">//点 运行和调试 -> 创建lanuch.json (运行和调试的配置文件) -> 选gcc</span>\n\n断点调试   <span class=\"token comment\">// 在某行代码 行数字的前面 点击 设置断点(红点变亮) </span>\n\t  <span class=\"token comment\">// 点绿三角运行（或F5） -> 可单步调试(F11）   </span>\n\n备份      <span class=\"token comment\">//备份.vscode 文件，当有新的代码时，拷贝过去，无需花时间再配置    </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"底层思维\"><a href=\"#底层思维\" class=\"headerlink\" title=\"底层思维\"></a>底层思维</h2><h3 id=\"二进制-amp-十六进制\"><a href=\"#二进制-amp-十六进制\" class=\"headerlink\" title=\"二进制&amp;十六进制\"></a>二进制&amp;十六进制</h3><p>1kb代表2的10次方的2进制</p>\n<p>1mb代表2的20次方的二进制</p>\n<p>1Gb代表2的30次方个二进制</p>\n<h3 id=\"gcc编译\"><a href=\"#gcc编译\" class=\"headerlink\" title=\"gcc编译\"></a>gcc编译</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc main.c  &#x2F;&#x2F;编译C程序，默认生成a.out执行文件\n&#x2F;&#x2F;也可以改名字，gcc main.c -o xxx.exe\n &#x2F;&#x2F;gcc -v main.c 显示详细的编译过程信息\n$ .&#x2F;a.out     &#x2F;&#x2F;运行程序<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"gdb-调试\"><a href=\"#gdb-调试\" class=\"headerlink\" title=\"gdb 调试\"></a>gdb 调试</h3><p>原始的编译方式</p>\n<p>int b =5；int w = 6；他们的地址是相邻的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc -g  main.c  &#x2F;&#x2F;编译生成带有调试信息的执行文件a.tou\n$ gdb a.out &#x2F;&#x2F;调试程序\n$ l     &#x2F;&#x2F;list: 查看源码(默认10行)\n        &#x2F;&#x2F;list 8  查看8行附近的代码\n        &#x2F;&#x2F;list main 查看函数名附近的码\n$ b 5   &#x2F;&#x2F;break: 在第5行设置断点\n$ r     &#x2F;&#x2F;run: 运行到断点处（如无则运行直到结束）\n$ s     &#x2F;&#x2F;step: 单步执行（如果是函数则进入）\n$ n     &#x2F;&#x2F;next: 单步跳过（如果是函数则跳过）\n$ p a   &#x2F;&#x2F;print: 查看变量内容\n        &#x2F;&#x2F; p &amp;a  查看变量a的地址\n        &#x2F;&#x2F; p &amp;b+1   b变量的地址根据数据类型递增(int型 会加4，char型则加1)\n        &#x2F;&#x2F; p *(&amp;b+1)\n        &#x2F;&#x2F; p a[1] \n        &#x2F;&#x2F; p *p1 查看p1指针里的内容 \n        &#x2F;&#x2F; p  add(4,7)  调用函数add 并打印返回值\n$ p&#x2F;t b &#x2F;&#x2F; t  二进制显示 变量的值  \n\t&#x2F;&#x2F; x  按十六进制格式显示变量。\n\t&#x2F;&#x2F; d  按十进制格式显示变量。\n\t&#x2F;&#x2F; u  按十六进制格式显示无符号整型。\n\t&#x2F;&#x2F; o  按八进制格式显示变量。\n\t&#x2F;&#x2F; a  按十六进制格式显示变量。\n\t&#x2F;&#x2F; c  按字符格式显示变量。\n\t&#x2F;&#x2F; f  按浮点数格式显示变量。      \n$ x &amp;a  &#x2F;&#x2F;显示某地址的内存值 \n        &#x2F;&#x2F;例如 float a &#x3D; 0.45; 的内存值为\n        &#x2F;&#x2F; 0x7fffffffdf8c:\t00111110111001100110011001100110        \n上下键  &#x2F;&#x2F;可查看历史命令\n$ bt     &#x2F;&#x2F;查看堆栈信息 （如嵌套调用多个函数时）\n$ c      &#x2F;&#x2F;continue： 继续执行程序（直到下一个断点或者结束）\n$ q      &#x2F;&#x2F;quit: 退出gdb调试\n$ dmesg  &#x2F;&#x2F;查看内核信息     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"如何编译生成执行文件\"><a href=\"#如何编译生成执行文件\" class=\"headerlink\" title=\"如何编译生成执行文件\"></a>如何编译生成执行文件</h3><p>1、预处理（cpp）：<strong>gcc -e</strong>，生成main.i，内容包括“宏替换，条件编译，include”</p>\n<p>2、编译（cc）：<strong>gcc -s</strong>，生成main.s汇编文件</p>\n<p>3、汇编（as）：<strong>gcc -c</strong>，生成main.o</p>\n<p>4、将main.o和libmy.a和fun.o链接（ld）：<strong>gcc</strong>,生成a.out执行文件（.bin  .exe）</p>\n<h4 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc -E main.c -o main.i &#x2F;&#x2F;停在预处理阶段(生成 main.i文件) \n                          &#x2F;&#x2F;发现宏被替换了,条件编译生效<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc -S main.c  &#x2F;&#x2F;停在编译阶段(生成汇编文件 main.s) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc -c main.c  &#x2F;&#x2F;停在汇编阶段(生成目标文件 main.o )\n$ vim main.o  &#x2F;&#x2F;16进制显示 二进制文件\n              &#x2F;&#x2F;在命令行模式下输入  :%!xxd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">$ gcc -c fun.c \n\n$ gcc main.o fun.o  &#x2F;&#x2F;链接目标文件或库文件(.a .so)，生成执行文件 a.out(.bin .exe)\n                    &#x2F;&#x2F;独立的目标文件都是从0地址开始，需要链接来重新合并安排地址 \n                    &#x2F;&#x2F;链接异常 会报 collect2: error: ld returned 1 exit status               \n$ objdump -d a.out   &#x2F;&#x2F;查看反汇编代码\t\n                     &#x2F;&#x2F;可查看 objdump -d fun.o 等看链接过程是如何把代码嵌入式到main.o中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量和数据类型\"><a href=\"#变量和数据类型\" class=\"headerlink\" title=\"变量和数据类型\"></a>变量和数据类型</h2><p><img src=\"http://www.yhrgzn.com/entry/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\"></p>\n","text":" 前言：写这么一篇blog的原因有： ​ 重走一边c路，巩固基础知识，基础不牢，地动山摇 ​ 学会底层思维 //编译运行 资源分配回收 效率 ​ 重点 难点 突破 //指针 内存 面向面试 环境搭建 环境搭建安装好vsc后，创建main.c后输入#include &lt;stdi...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"记录","slug":"记录","count":3,"path":"api/categories/记录.json"}],"tags":[{"name":"c","slug":"c","count":2,"path":"api/tags/c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%95%E5%B1%82%E6%80%9D%E7%BB%B4\"><span class=\"toc-text\">底层思维</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6-amp-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">二进制&amp;十六进制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gcc%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">gcc编译</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gdb-%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">gdb 调试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E7%94%9F%E6%88%90%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">如何编译生成执行文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">预处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96\"><span class=\"toc-text\">汇编</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">链接</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量和数据类型</span></a></li></ol>","author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"日常踩坑-pip3","uid":"a74d8c03b21a96da74602aa82e615493","slug":"日常踩坑-pip3","date":"2022-02-23T23:06:39.000Z","updated":"2022-02-23T23:08:21.019Z","comments":true,"path":"api/articles/日常踩坑-pip3.json","keywords":null,"cover":null,"text":"我今天在安装这个pytorch 然后安装的时候，需要使用python3.6以上的版本，然后我就找到了这篇文章 (84条消息) ubuntu18.04升级Python3.6到Python3.7_isanth-CSDN博客 成功的安装了3.7版本的python 但是不知道为什么，这以...","link":"","photos":[],"count_time":{"symbolsCount":353,"symbolsTime":"1 mins."},"categories":[{"name":"taking","slug":"taking","count":3,"path":"api/categories/taking.json"}],"tags":[{"name":"linux","slug":"linux","count":3,"path":"api/tags/linux.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"17届智能车日志","uid":"821b392c122e136488bc357accf1698d","slug":"17届智能车日志","date":"2022-01-06T08:17:07.000Z","updated":"2022-04-02T00:58:43.965Z","comments":true,"path":"api/articles/17届智能车日志.json","keywords":null,"cover":null,"text":"2022年1月6日今天的话，期末考试实际上还是没有结束，但最后一个科目在五天后，而且学长说比较简单，那我就赶紧开始智能车这个项目啦，冲冲冲。 我的意向是单车组别，今天查看了龙邱的方案，今天万能的群友试错，感觉效果还是非常不错的，所以就先跟着这个方案做了，用自己的钱（我的奖学金，本...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"比赛项目","slug":"比赛项目","count":3,"path":"api/categories/比赛项目.json"}],"tags":[{"name":"智能车","slug":"智能车","count":2,"path":"api/tags/智能车.json"}],"author":{"name":"祥瑞","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/04/08/L9tIA0.jpg","link":"/","description":"励志成为野生钢铁侠-稚晖君的小弟 <br /> @ <b>B站：电工渣</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}